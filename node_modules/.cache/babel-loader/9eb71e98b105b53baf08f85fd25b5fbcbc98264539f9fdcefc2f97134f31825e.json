{"ast":null,"code":"import _regeneratorRuntime from\"/Users/stasy/Desktop/Public+Privacy_0831/public-privacy-frontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";import _asyncToGenerator from\"/Users/stasy/Desktop/Public+Privacy_0831/public-privacy-frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _slicedToArray from\"/Users/stasy/Desktop/Public+Privacy_0831/public-privacy-frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useEffect,useState,useContext}from\"react\";import{Link,useNavigate}from\"react-router-dom\";import AuthContext from\"./shared/AuthContext.js\";import httpClient from\"../http-common.js\";import Footer from\"../components/Footer.js\";import Alert from\"./Alert.js\";// Update the path to your Alert.js file\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";var OpinionsList=function OpinionsList(){var _useContext=useContext(AuthContext),loginToken=_useContext.loginToken;var _useState=useState(false),_useState2=_slicedToArray(_useState,2),isOpinionsLoaded=_useState2[0],setIsOpinionsLoaded=_useState2[1];var _useState3=useState([]),_useState4=_slicedToArray(_useState3,2),opinions=_useState4[0],setOpinions=_useState4[1];var _useState5=useState(false),_useState6=_slicedToArray(_useState5,2),showAlert=_useState6[0],setShowAlert=_useState6[1];var _useState7=useState(\"\"),_useState8=_slicedToArray(_useState7,2),alertMessage=_useState8[0],setAlertMessage=_useState8[1];var _useState9=useState(\"\"),_useState10=_slicedToArray(_useState9,2),alertType=_useState10[0],setAlertType=_useState10[1];var hasLoginToken=document.cookie.includes(\"loginToken\");var navigate=useNavigate();var handleShowAlert=function handleShowAlert(message,type){setAlertMessage(message);setAlertType(type);setShowAlert(true);};var handleHideAlert=function handleHideAlert(){setShowAlert(false);};// useEffect(() => {\n//   setIsOpinionsLoaded(false);\n//   const getAll = async () => {\n//     const headers = {\n//       \"loginToken\": loginToken,\n//     };\n//     try {\n//       const response = await httpClient.get('/forum/opinions', { withCredentials: true, headers });\n//       return response;\n//     } catch (error) {\n//       console.log(error);\n//       handleShowAlert(`LOADING THE UNDEFINED DATA...`, \"notification\");\n//       return;\n//     }\n//   };\n//   getAll()\n//     .then(response => {\n//       const opinionsData = response?.data;\n//       if ([204, 403, 500, 205].includes(response?.status)) {\n//         handleShowAlert(`Oops, there are some data fetching issues. Come back later, please.`, \"notification\");\n//         navigate(\"/about\");\n//         navigate(\"/about\");\n//         return;\n//       }\n//       const updatedOpinions = opinionsData?.map(opinionData => {\n//         const updatedAtString = new Date(opinionData.updatedAt).toLocaleDateString();\n//         const createdAtString = new Date(opinionData.createdAt).toLocaleDateString();\n//         return {\n//           id: opinionData.id,\n//           updatedAt: updatedAtString,\n//           createdAt: createdAtString,\n//           collaboratorName: opinionData.collaboratorName,\n//           category: opinionData.category,\n//           body: opinionData.body,\n//           title: opinionData.title,\n//           country: opinionData.country,\n//           city: opinionData.city,\n//         };\n//       });\n//       setOpinions(updatedOpinions);\n//       setIsOpinionsLoaded(true);\n//       handleHideAlert();\n//     })\n//     .catch(error => {\n//       console.log(error);\n//       if (hasLoginToken) {\n//         handleShowAlert(\"Apologies from the server side. We'll fix it asap.\", \"notification\");\n//         navigate(\"/about\");\n//       } else {\n//         handleShowAlert(\"Not Authenticated.\", \"notification\");\n//         navigate(\"/about\");\n//       }\n//     });\n// }, [hasLoginToken, loginToken, navigate]);\n///here it works traditionally\n// useEffect(() => {\n//   setIsOpinionsLoaded(false); \n//   if (hasLoginToken) {\n//     const getAll = async () => {\n//       const headers = {\n//         \"loginToken\": loginToken,\n//       };\n//       try {\n//         const response = await httpClient.get('/forum/opinions', { withCredentials: true, headers });\n//         return response;\n//       } catch (error) {\n//         console.log(error);\n//         handleShowAlert(`LOADING THE UNDEFINED DATA...`, \"notification\");\n//         return;\n//       }\n//     };\n//     getAll()\n//       .then(response => {\n//         const opinionsData = response?.data;\n//         if ([204, 403, 500, 205].includes(response?.status)) {\n//           handleShowAlert(`Oops, there are some data fetching issues. Come back later, please.`, \"notification\");\n//           navigate(\"/about\");\n//           navigate(\"/about\");\n//           return;\n//         }\n//         const updatedOpinions = opinionsData?.map(opinionData => {\n//           const updatedAtString = new Date(opinionData.updatedAt).toLocaleDateString();\n//           const createdAtString = new Date(opinionData.createdAt).toLocaleDateString();\n//           return {\n//             id: opinionData.id,\n//             updatedAt: updatedAtString,\n//             createdAt: createdAtString,\n//             collaboratorName: opinionData.collaboratorName,\n//             category: opinionData.category,\n//             body: opinionData.body,\n//             title: opinionData.title,\n//             country: opinionData.country,\n//             city: opinionData.city,\n//           };\n//         });\n//         setOpinions(updatedOpinions);\n//         setIsOpinionsLoaded(true);\n//         handleHideAlert(); // Hide the alert when data is loaded\n//       })\n//       .catch(error => {\n//         console.log(error);\n//         if (hasLoginToken) {\n//           handleShowAlert(\"Apologies from the server side. We'll fix it asap.\", \"notification\");\n//           navigate(\"/about\");\n//         } else {\n//           handleShowAlert(\"Not Authenticated.\", \"notification\");\n//           navigate(\"/about\");\n//         }\n//       });\n//   } else {\n//     handleShowAlert(`Please log in first to see the content.`, \"notification\");\n//   }\n// }, [hasLoginToken]);\nuseEffect(function(){setIsOpinionsLoaded(false);if(hasLoginToken){var getAll=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(){var headers,response;return _regeneratorRuntime().wrap(function _callee$(_context){while(1)switch(_context.prev=_context.next){case 0:headers={\"loginToken\":loginToken};_context.prev=1;_context.next=4;return httpClient.get('/forum/opinions',{withCredentials:true,headers:headers});case 4:response=_context.sent;return _context.abrupt(\"return\",response);case 8:_context.prev=8;_context.t0=_context[\"catch\"](1);console.log(_context.t0);handleShowAlert(\"LOADING THE UNDEFINED DATA...\",\"notification\");return _context.abrupt(\"return\");case 13:case\"end\":return _context.stop();}},_callee,null,[[1,8]]);}));return function getAll(){return _ref.apply(this,arguments);};}();getAll().then(function(response){var opinionsData=response===null||response===void 0?void 0:response.data;if([204,403,500,205].includes(response===null||response===void 0?void 0:response.status)){handleShowAlert(\"Oops, there are some data fetching issues. Come back later, please.\",\"notification\");navigate(\"/about\");navigate(\"/about\");return;}var updatedOpinions=opinionsData===null||opinionsData===void 0?void 0:opinionsData.map(function(opinionData){var updatedAtString=new Date(opinionData.updatedAt).toLocaleDateString();var createdAtString=new Date(opinionData.createdAt).toLocaleDateString();return{id:opinionData.id,updatedAt:updatedAtString,createdAt:createdAtString,collaboratorName:opinionData.collaboratorName,category:opinionData.category,body:opinionData.body,title:opinionData.title,country:opinionData.country,city:opinionData.city};});setOpinions(updatedOpinions);setIsOpinionsLoaded(true);handleHideAlert();// Hide the alert when data is loaded\n}).catch(function(error){console.log(error);if(hasLoginToken){handleShowAlert(\"Apologies from the server side. We'll fix it asap.\",\"notification\");navigate(\"/about\");}else{handleShowAlert(\"Not Authenticated.\",\"notification\");navigate(\"/about\");}});}else{handleShowAlert(\"Please log in first to see the content.\",\"notification\");}},[hasLoginToken]);console.log(\"isOpinionsLoaded:\",isOpinionsLoaded);console.log(\"opinions:\",opinions);var opinionBlocks=[];if(isOpinionsLoaded&&opinions){opinionBlocks=Object.entries(opinions.reduce(function(acc,opinion){if(!acc[opinion.category]){acc[opinion.category]=[];}acc[opinion.category].push(opinion);return acc;},{})).map(function(_ref2){var _ref3=_slicedToArray(_ref2,2),category=_ref3[0],opinions=_ref3[1];return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h4\",{style:{fontWeight:\"bold\",color:\"black\"},children:category}),opinions.map(function(opinion){return/*#__PURE__*/_jsx(\"div\",{style:{border:\"10px solid black\",padding:\"1em\",margin:\"1em 0\",color:\"black\"},children:/*#__PURE__*/_jsxs(Link,{to:\"/forum/opinions/\".concat(opinion.id),className:\"text-decoration-none\",children:[/*#__PURE__*/_jsx(\"h5\",{className:\"text-capitalize\",style:{textDecoration:\"underline\",wordBreak:\"break-word\",whiteSpace:\"pre-line\",color:\"black\"},children:opinion.title}),/*#__PURE__*/_jsx(\"h6\",{style:{fontWeight:\"normal\",wordBreak:\"break-word\",whiteSpace:\"pre-line\",color:\"black\"},className:\"text-left\",children:opinion.body}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"br\",{}),opinion.country||opinion.city?/*#__PURE__*/_jsxs(\"h6\",{style:{fontWeight:\"normal\",wordBreak:\"break-word\",whiteSpace:\"pre-line\",textAlign:\"right\",fontSize:\"smaller\",color:\"black\"},className:\"text-capitalize text-left\",children:[\"inspired at \",/*#__PURE__*/_jsxs(\"span\",{style:{fontWeight:\"bolder\"},children:[opinion.country,\", \",opinion.city]})]}):null,/*#__PURE__*/_jsxs(\"h6\",{style:{fontSize:\"smaller\",fontWeight:\"lighter\",wordBreak:\"break-word\",textAlign:\"right\",color:\"black\"},children:[\"Last Updated: \",opinion.updatedAt]})]})},opinion.id);})]},category);});}// return (\n//     <>\n//       {showAlert && (\n//         <Alert message={alertMessage} type={alertType} onClose={handleHideAlert} />\n//       )}\n//       <div className=\"container\">\n//         <div className=\"row justify-content-left\">\n//           <div className=\"col-sm-8\">\n//             <div className=\"d-flex flex-column align-items-left\">\n//               <h2 style={{ fontWeight: \"bolder\" }}>OPINIONS</h2>\n//             </div>\n//           </div>\n//         </div>\n//         <div className=\"row justify-content-left\">\n//           <div className=\"col-sm-8 text-left\">\n//             <div\n//               className=\"d-flex flex-column align-items-left\"\n//               style={{ width: \"100%\", margin: \"0 auto\", color: \"black\" }}\n//             >\n//               {opinionBlocks.map(opinionBlock => (\n//                 <div key={opinionBlock.category}>\n//                   <h4 style={{ fontWeight: \"bold\", color: \"black\" }}>{opinionBlock.category}</h4>\n//                   {opinionBlock.opinions.map(opinion => (\n//                     <div key={opinion.id} style={{ border: \"10px solid black\", padding: \"1em\", margin: \"1em 0\", color: \"black\" }}>\n//                       {hasLoginToken ? (\n//                         <Link to={`/forum/opinions/${opinion.id}`} className=\"text-decoration-none\">\n//                           <h5 className=\"text-capitalize\" style={{ textDecoration: \"underline\", wordBreak: \"break-word\", whiteSpace: \"pre-line\", color: \"black\" }}>\n//                             {opinion.title}\n//                           </h5>\n//                           <h6 style={{ fontWeight: \"normal\", wordBreak: \"break-word\", whiteSpace: \"pre-line\", color: \"black\" }} className=\"text-left\">\n//                             {opinion.body}\n//                           </h6>\n//                           {opinion.country || opinion.city ? (\n//                             <h6 style={{ fontWeight: \"normal\", wordBreak: \"break-word\", whiteSpace: \"pre-line\", textAlign: \"right\", fontSize: \"smaller\", color: \"black\" }} className=\"text-capitalize text-left\">\n//                               inspired at <span style={{ fontWeight: \"bolder\" }}>{opinion.country}, {opinion.city}</span>\n//                             </h6>\n//                           ) : null}\n//                           <h6 style={{ fontSize: \"smaller\", fontWeight: \"lighter\", wordBreak: \"break-word\", textAlign: \"right\", color: \"black\" }}>\n//                             Last Updated: {opinion.updatedAt}\n//                           </h6>\n//                         </Link>\n//                       ) : (\n//                         // Non-clickable content for non-logged-in users\n//                         <div>\n//                           <h5 className=\"text-capitalize\" style={{ textDecoration: \"none\", wordBreak: \"break-word\", whiteSpace: \"pre-line\", color: \"black\" }}>\n//                             {opinion.title}\n//                           </h5>\n//                           <h6 style={{ fontWeight: \"normal\", wordBreak: \"break-word\", whiteSpace: \"pre-line\", color: \"black\" }} className=\"text-left\">\n//                             {opinion.body}\n//                           </h6>\n//                           {opinion.country || opinion.city ? (\n//                             <h6 style={{ fontWeight: \"normal\", wordBreak: \"break-word\", whiteSpace: \"pre-line\", textAlign: \"right\", fontSize: \"smaller\", color: \"black\" }} className=\"text-capitalize text-left\">\n//                               inspired at <span style={{ fontWeight: \"bolder\" }}>{opinion.country}, {opinion.city}</span>\n//                             </h6>\n//                           ) : null}\n//                           <h6 style={{ fontSize: \"smaller\", fontWeight: \"lighter\", wordBreak: \"break-word\", textAlign: \"right\", color: \"black\" }}>\n//                             Last Updated: {opinion.updatedAt}\n//                           </h6>\n//                         </div>\n//                       )}\n//                     </div>\n//                   ))}\n//                 </div>\n//               ))}\n//             </div>\n//           </div>\n//         </div>\n//       </div>\n//       <br />\n//       <br />\n//       <br />\n//       <br />\n//       <br />\n//       <br />\n//       <br />\n//       <br />\n//       <Footer />\n//     </>\n//   );\n// };\n// export default OpinionsList;\nreturn/*#__PURE__*/_jsxs(_Fragment,{children:[showAlert&&/*#__PURE__*/_jsx(Alert,{message:alertMessage,type:alertType,onClose:handleHideAlert}),/*#__PURE__*/_jsxs(\"div\",{className:\"container\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"row justify-content-left\",children:/*#__PURE__*/_jsx(\"div\",{className:\"col-sm-8\",children:/*#__PURE__*/_jsx(\"div\",{className:\"d-flex flex-column align-items-left\",children:/*#__PURE__*/_jsx(\"h2\",{style:{fontWeight:\"bolder\"},children:\"OPINIONS\"})})})}),/*#__PURE__*/_jsx(\"div\",{className:\"row justify-content-left\",children:/*#__PURE__*/_jsx(\"div\",{className:\"col-sm-8 text-left\",children:/*#__PURE__*/_jsx(\"div\",{className:\"d-flex flex-column align-items-left\",style:{width:'100%',margin:'0 auto',color:\"black\"},children:hasLoginToken&&isOpinionsLoaded?opinionBlocks.length>0?opinionBlocks:/*#__PURE__*/_jsx(\"div\",{className:\"text-left\",children:/*#__PURE__*/_jsx(\"h5\",{children:\"No Opinions available.\"})}):/*#__PURE__*/_jsx(\"div\",{className:\"text-left\",children:/*#__PURE__*/_jsx(\"h5\",{children:\"Please consider logging in when the data loads.\"})})})})})]}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(Footer,{})]});};export default OpinionsList;// import React, { useEffect, useState, useContext } from \"react\";\n// import { Link, useNavigate } from \"react-router-dom\";\n// import AuthContext from \"./shared/AuthContext.js\";\n// import httpClient from \"../http-common.js\";\n// import Footer from \"../components/Footer.js\";\n// import Alert from \"./Alert.js\"; // Update the path to your Alert.js file\n// const OpinionsList = () => {\n//   const { isAuthenticated, loginToken } = useContext(AuthContext);\n//   const [isLoading, setIsLoading] = useState(true);\n//   const [opinions, setOpinions] = useState([]);\n//   const [showAlert, setShowAlert] = useState(false);\n//   const [alertMessage, setAlertMessage] = useState(\"\");\n//   const [alertType, setAlertType] = useState(\"\");\n//   const navigate = useNavigate();\n//   const handleShowAlert = (message, type) => {\n//     setAlertMessage(message);\n//     setAlertType(type);\n//     setShowAlert(true);\n//   };\n//   const handleHideAlert = () => {\n//     setShowAlert(false);\n//   };\n//   useEffect(() => {\n//     const getAll = async () => {\n//       const headers = {\n//         \"loginToken\": loginToken,\n//       };\n//       try {\n//         const response = await httpClient.get('/forum/opinions', { withCredentials: true, headers });\n//         return response;\n//       } catch (error) {\n//         // console.log(error);\n//         handleShowAlert(`LOADING THE UNDEFINED DATA...`, \"notification\");\n//       }\n//     };\n//     getAll()\n//       .then(response => {\n//         const opinionsData = response?.data;\n//         if ([204, 403, 500, 205].includes(response?.status)) {\n//           handleShowAlert(`Oops, there are some data fetching issues. Come back later, please.`, \"notification\");\n//           setShowAlert(true);\n//           navigate(\"/about\");\n//           return;\n//         }\n//         // console.log(isAuthenticated);\n//         // console.log(opinionsData);\n//         const updatedOpinions = opinionsData?.map(opinionData => {\n//           const updatedAtString = new Date(opinionData.updatedAt).toLocaleDateString();\n//           const createdAtString = new Date(opinionData.createdAt).toLocaleDateString();\n//           return {\n//             id: opinionData.id,\n//             updatedAt: updatedAtString,\n//             createdAt: createdAtString,\n//             collaboratorName: opinionData.collaboratorName,\n//             category: opinionData.category,\n//             body: opinionData.body,\n//             title: opinionData.title,\n//           };\n//         });\n//         setOpinions(updatedOpinions);\n//       })\n//       .catch(error => {\n//         // console.log(error);\n//         if (isAuthenticated) {\n//           handleShowAlert(\"Apologies from the server side. We'll fix it asap.\", \"notification\");\n//         } else {\n//           handleShowAlert(\"Not Authenticated.\", \"notification\");\n//         }\n//       });\n//   }, [isAuthenticated]);\n//   const opinionBlocks = Object.entries(opinions?.reduce((acc, opinion) => {\n//     if (!acc[opinion.category]) {\n//       acc[opinion.category] = [];\n//     }\n//     acc[opinion.category].push(opinion);\n//     return acc;\n//   }, {})).map(([category, opinions]) => (\n//     <div key={category}>\n//       <h4 style={{ fontWeight: \"bold\" }}>{category}</h4>\n//       {opinions.map(opinion => (\n//         <div key={opinion.id} style={{ border: \"10px solid black\", padding: \"1em\", margin: \"1em 0\" }}>\n//           <Link to={`/forum/opinions/${opinion.id}`} className=\"text-decoration-none\">\n//             <h5 className=\"text-capitalize\" style={{ textDecoration: \"underline\", wordBreak: \"break-word\" ,whiteSpace: \"pre-line\" }}>\n//               {opinion.title}\n//             </h5>\n//             <h6 style={{ fontWeight: \"normal\", wordBreak: \"break-word\",whiteSpace: \"pre-line\" }} className=\"text-capitalize text-left\">\n//               {opinion.body}\n//             </h6>\n//             <h6 style={{ fontSize: \"smaller\", fontWeight: \"lighter\", wordBreak: \"break-word\", textAlign:\"right\" }}>\n//               Last Updated: {opinion.updatedAt}\n//             </h6>\n//           </Link>\n//         </div>\n//       ))}\n//     </div>\n//   ));\n//   return (\n//     <>\n//       {showAlert && (\n//         <Alert\n//           type={alertType}\n//           message={alertMessage}\n//           onClose={handleHideAlert}\n//         />\n//       )}\n//       <div className=\"container\" style={{ overflow: \"auto\", maxHeight: \"calc(100vh - 300px)\" }}>\n//         <div className=\"row justify-content-left\">\n//           <div className=\"col-sm-8\">\n//             <div className=\"d-flex flex-column align-items-left\">\n//               <h2 style={{ fontWeight: \"bolder\" }}>OPINIONS</h2>\n//             </div>\n//           </div>\n//           <div className=\"row justify-content-left\">\n//             <div className=\"col-sm-8 text-left\">\n//               <div className=\"d-flex flex-column align-items-left\" style={{ width: '100%', margin: '0 auto' }}>\n//                 {isAuthenticated && loginToken ? (\n//                   opinionBlocks.length > 0 ? (\n//                     opinionBlocks\n//                   ) : (\n//                     <div className=\"text-left\">\n//                       <h5>No Opinions available.</h5>\n//                     </div>\n//                   )\n//                 ) : (\n//                   <div className=\"text-left\">\n//                     <h5>Please consider logging in when the data loads.</h5>\n//                   </div>\n//                 )}\n//               </div>\n//             </div>\n//           </div>\n//         </div>\n//       </div>\n//       <br />\n//       <br />\n//       <br />\n//       <br />\n//       <br />\n//       <br />\n//       <br />\n//       <br />\n//       <Footer />\n//     </>\n//   );\n// };\n// export default OpinionsList;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}