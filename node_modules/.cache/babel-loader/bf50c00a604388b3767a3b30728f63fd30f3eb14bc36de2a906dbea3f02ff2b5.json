{"ast":null,"code":"import _get from \"/Users/stasy/Desktop/Public+Privacy_0831/public-privacy-frontend/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/stasy/Desktop/Public+Privacy_0831/public-privacy-frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _assertThisInitialized from \"/Users/stasy/Desktop/Public+Privacy_0831/public-privacy-frontend/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _classCallCheck from \"/Users/stasy/Desktop/Public+Privacy_0831/public-privacy-frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/stasy/Desktop/Public+Privacy_0831/public-privacy-frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/stasy/Desktop/Public+Privacy_0831/public-privacy-frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/stasy/Desktop/Public+Privacy_0831/public-privacy-frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Box3, BufferGeometry, Float32BufferAttribute, InstancedBufferGeometry, InstancedInterleavedBuffer, InterleavedBufferAttribute, Sphere, Vector3, WireframeGeometry, ShaderLib, ShaderMaterial, UniformsLib, UniformsUtils, Vector2, Line3, MathUtils, Matrix4, Mesh, Vector4 } from 'three';\nvar THREE$2 = window.THREE ? window.THREE // Prefer consumption from global THREE, if exists\n: {\n  Box3: Box3,\n  BufferGeometry: BufferGeometry,\n  Float32BufferAttribute: Float32BufferAttribute,\n  InstancedBufferGeometry: InstancedBufferGeometry,\n  InstancedInterleavedBuffer: InstancedInterleavedBuffer,\n  InterleavedBufferAttribute: InterleavedBufferAttribute,\n  Sphere: Sphere,\n  Vector3: Vector3,\n  WireframeGeometry: WireframeGeometry\n};\n\n// support multiple method names for backwards threejs compatibility\nvar setAttributeFn$1 = new THREE$2.BufferGeometry().setAttribute ? 'setAttribute' : 'addAttribute';\nvar _box$1 = new THREE$2.Box3();\nvar _vector = new THREE$2.Vector3();\nvar LineSegmentsGeometry = /*#__PURE__*/function (_THREE$2$InstancedBuf) {\n  _inherits(LineSegmentsGeometry, _THREE$2$InstancedBuf);\n  var _super = _createSuper(LineSegmentsGeometry);\n  function LineSegmentsGeometry() {\n    var _this;\n    _classCallCheck(this, LineSegmentsGeometry);\n    _this = _super.call(this);\n    _this.type = 'LineSegmentsGeometry';\n    var positions = [-1, 2, 0, 1, 2, 0, -1, 1, 0, 1, 1, 0, -1, 0, 0, 1, 0, 0, -1, -1, 0, 1, -1, 0];\n    var uvs = [-1, 2, 1, 2, -1, 1, 1, 1, -1, -1, 1, -1, -1, -2, 1, -2];\n    var index = [0, 2, 1, 2, 3, 1, 2, 4, 3, 4, 5, 3, 4, 6, 5, 6, 7, 5];\n    _this.setIndex(index);\n    _this[setAttributeFn$1]('position', new THREE$2.Float32BufferAttribute(positions, 3));\n    _this[setAttributeFn$1]('uv', new THREE$2.Float32BufferAttribute(uvs, 2));\n    return _this;\n  }\n  _createClass(LineSegmentsGeometry, [{\n    key: \"applyMatrix4\",\n    value: function applyMatrix4(matrix) {\n      var start = this.attributes.instanceStart;\n      var end = this.attributes.instanceEnd;\n      if (start !== undefined) {\n        start.applyMatrix4(matrix);\n        end.applyMatrix4(matrix);\n        start.needsUpdate = true;\n      }\n      if (this.boundingBox !== null) {\n        this.computeBoundingBox();\n      }\n      if (this.boundingSphere !== null) {\n        this.computeBoundingSphere();\n      }\n      return this;\n    }\n  }, {\n    key: \"setPositions\",\n    value: function setPositions(array) {\n      var lineSegments;\n      if (array instanceof Float32Array) {\n        lineSegments = array;\n      } else if (Array.isArray(array)) {\n        lineSegments = new Float32Array(array);\n      }\n      var instanceBuffer = new THREE$2.InstancedInterleavedBuffer(lineSegments, 6, 1); // xyz, xyz\n\n      this[setAttributeFn$1]('instanceStart', new THREE$2.InterleavedBufferAttribute(instanceBuffer, 3, 0)); // xyz\n\n      this[setAttributeFn$1]('instanceEnd', new THREE$2.InterleavedBufferAttribute(instanceBuffer, 3, 3)); // xyz\n      //\n\n      this.computeBoundingBox();\n      this.computeBoundingSphere();\n      return this;\n    }\n  }, {\n    key: \"setColors\",\n    value: function setColors(array) {\n      var colors;\n      if (array instanceof Float32Array) {\n        colors = array;\n      } else if (Array.isArray(array)) {\n        colors = new Float32Array(array);\n      }\n      var instanceColorBuffer = new THREE$2.InstancedInterleavedBuffer(colors, 6, 1); // rgb, rgb\n\n      this[setAttributeFn$1]('instanceColorStart', new THREE$2.InterleavedBufferAttribute(instanceColorBuffer, 3, 0)); // rgb\n\n      this[setAttributeFn$1]('instanceColorEnd', new THREE$2.InterleavedBufferAttribute(instanceColorBuffer, 3, 3)); // rgb\n\n      return this;\n    }\n  }, {\n    key: \"fromWireframeGeometry\",\n    value: function fromWireframeGeometry(geometry) {\n      this.setPositions(geometry.attributes.position.array);\n      return this;\n    }\n  }, {\n    key: \"fromEdgesGeometry\",\n    value: function fromEdgesGeometry(geometry) {\n      this.setPositions(geometry.attributes.position.array);\n      return this;\n    }\n  }, {\n    key: \"fromMesh\",\n    value: function fromMesh(mesh) {\n      this.fromWireframeGeometry(new THREE$2.WireframeGeometry(mesh.geometry)); // set colors, maybe\n\n      return this;\n    }\n  }, {\n    key: \"fromLineSegments\",\n    value: function fromLineSegments(lineSegments) {\n      var geometry = lineSegments.geometry;\n      if (geometry.isGeometry) {\n        console.error('LineSegmentsGeometry no longer supports Geometry. Use THREE.BufferGeometry instead.');\n        return;\n      } else if (geometry.isBufferGeometry) {\n        this.setPositions(geometry.attributes.position.array); // assumes non-indexed\n      } // set colors, maybe\n\n      return this;\n    }\n  }, {\n    key: \"computeBoundingBox\",\n    value: function computeBoundingBox() {\n      if (this.boundingBox === null) {\n        this.boundingBox = new THREE$2.Box3();\n      }\n      var start = this.attributes.instanceStart;\n      var end = this.attributes.instanceEnd;\n      if (start !== undefined && end !== undefined) {\n        this.boundingBox.setFromBufferAttribute(start);\n        _box$1.setFromBufferAttribute(end);\n        this.boundingBox.union(_box$1);\n      }\n    }\n  }, {\n    key: \"computeBoundingSphere\",\n    value: function computeBoundingSphere() {\n      if (this.boundingSphere === null) {\n        this.boundingSphere = new THREE$2.Sphere();\n      }\n      if (this.boundingBox === null) {\n        this.computeBoundingBox();\n      }\n      var start = this.attributes.instanceStart;\n      var end = this.attributes.instanceEnd;\n      if (start !== undefined && end !== undefined) {\n        var center = this.boundingSphere.center;\n        this.boundingBox.getCenter(center);\n        var maxRadiusSq = 0;\n        for (var i = 0, il = start.count; i < il; i++) {\n          _vector.fromBufferAttribute(start, i);\n          maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(_vector));\n          _vector.fromBufferAttribute(end, i);\n          maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(_vector));\n        }\n        this.boundingSphere.radius = Math.sqrt(maxRadiusSq);\n        if (isNaN(this.boundingSphere.radius)) {\n          console.error('THREE.LineSegmentsGeometry.computeBoundingSphere(): Computed radius is NaN. The instanced position data is likely to have NaN values.', this);\n        }\n      }\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {// todo\n    }\n  }, {\n    key: \"applyMatrix\",\n    value: function applyMatrix(matrix) {\n      console.warn('THREE.LineSegmentsGeometry: applyMatrix() has been renamed to applyMatrix4().');\n      return this.applyMatrix4(matrix);\n    }\n  }]);\n  return LineSegmentsGeometry;\n}(THREE$2.InstancedBufferGeometry);\nLineSegmentsGeometry.prototype.isLineSegmentsGeometry = true;\n\n/**\n * parameters = {\n *  color: <hex>,\n *  linewidth: <float>,\n *  dashed: <boolean>,\n *  dashScale: <float>,\n *  dashSize: <float>,\n *  dashOffset: <float>,\n *  gapSize: <float>,\n *  resolution: <Vector2>, // to be set by renderer\n * }\n */\nvar THREE$1 = window.THREE ? window.THREE // Prefer consumption from global THREE, if exists\n: {\n  ShaderLib: ShaderLib,\n  ShaderMaterial: ShaderMaterial,\n  UniformsLib: UniformsLib,\n  UniformsUtils: UniformsUtils,\n  Vector2: Vector2\n};\nTHREE$1.UniformsLib.line = {\n  worldUnits: {\n    value: 1\n  },\n  linewidth: {\n    value: 1\n  },\n  resolution: {\n    value: new THREE$1.Vector2(1, 1)\n  },\n  dashScale: {\n    value: 1\n  },\n  dashSize: {\n    value: 1\n  },\n  dashOffset: {\n    value: 0\n  },\n  gapSize: {\n    value: 1\n  } // todo FIX - maybe change to totalSize\n};\n\nTHREE$1.ShaderLib['line'] = {\n  uniforms: THREE$1.UniformsUtils.merge([THREE$1.UniformsLib.common, THREE$1.UniformsLib.fog, THREE$1.UniformsLib.line]),\n  vertexShader: /* glsl */\"\\n\\t\\t#include <common>\\n\\t\\t#include <color_pars_vertex>\\n\\t\\t#include <fog_pars_vertex>\\n\\t\\t#include <logdepthbuf_pars_vertex>\\n\\t\\t#include <clipping_planes_pars_vertex>\\n\\n\\t\\tuniform float linewidth;\\n\\t\\tuniform vec2 resolution;\\n\\n\\t\\tattribute vec3 instanceStart;\\n\\t\\tattribute vec3 instanceEnd;\\n\\n\\t\\tattribute vec3 instanceColorStart;\\n\\t\\tattribute vec3 instanceColorEnd;\\n\\n\\t\\tvarying vec2 vUv;\\n\\t\\tvarying vec4 worldPos;\\n\\t\\tvarying vec3 worldStart;\\n\\t\\tvarying vec3 worldEnd;\\n\\n\\t\\t#ifdef USE_DASH\\n\\n\\t\\t\\tuniform float dashScale;\\n\\t\\t\\tattribute float instanceDistanceStart;\\n\\t\\t\\tattribute float instanceDistanceEnd;\\n\\t\\t\\tvarying float vLineDistance;\\n\\n\\t\\t#endif\\n\\n\\t\\tvoid trimSegment( const in vec4 start, inout vec4 end ) {\\n\\n\\t\\t\\t// trim end segment so it terminates between the camera plane and the near plane\\n\\n\\t\\t\\t// conservative estimate of the near plane\\n\\t\\t\\tfloat a = projectionMatrix[ 2 ][ 2 ]; // 3nd entry in 3th column\\n\\t\\t\\tfloat b = projectionMatrix[ 3 ][ 2 ]; // 3nd entry in 4th column\\n\\t\\t\\tfloat nearEstimate = - 0.5 * b / a;\\n\\n\\t\\t\\tfloat alpha = ( nearEstimate - start.z ) / ( end.z - start.z );\\n\\n\\t\\t\\tend.xyz = mix( start.xyz, end.xyz, alpha );\\n\\n\\t\\t}\\n\\n\\t\\tvoid main() {\\n\\n\\t\\t\\t#ifdef USE_COLOR\\n\\n\\t\\t\\t\\tvColor.xyz = ( position.y < 0.5 ) ? instanceColorStart : instanceColorEnd;\\n\\n\\t\\t\\t#endif\\n\\n\\t\\t\\t#ifdef USE_DASH\\n\\n\\t\\t\\t\\tvLineDistance = ( position.y < 0.5 ) ? dashScale * instanceDistanceStart : dashScale * instanceDistanceEnd;\\n\\n\\t\\t\\t#endif\\n\\n\\t\\t\\tfloat aspect = resolution.x / resolution.y;\\n\\n\\t\\t\\tvUv = uv;\\n\\n\\t\\t\\t// camera space\\n\\t\\t\\tvec4 start = modelViewMatrix * vec4( instanceStart, 1.0 );\\n\\t\\t\\tvec4 end = modelViewMatrix * vec4( instanceEnd, 1.0 );\\n\\n\\t\\t\\tworldStart = start.xyz;\\n\\t\\t\\tworldEnd = end.xyz;\\n\\n\\t\\t\\t// special case for perspective projection, and segments that terminate either in, or behind, the camera plane\\n\\t\\t\\t// clearly the gpu firmware has a way of addressing this issue when projecting into ndc space\\n\\t\\t\\t// but we need to perform ndc-space calculations in the shader, so we must address this issue directly\\n\\t\\t\\t// perhaps there is a more elegant solution -- WestLangley\\n\\n\\t\\t\\tbool perspective = ( projectionMatrix[ 2 ][ 3 ] == - 1.0 ); // 4th entry in the 3rd column\\n\\n\\t\\t\\tif ( perspective ) {\\n\\n\\t\\t\\t\\tif ( start.z < 0.0 && end.z >= 0.0 ) {\\n\\n\\t\\t\\t\\t\\ttrimSegment( start, end );\\n\\n\\t\\t\\t\\t} else if ( end.z < 0.0 && start.z >= 0.0 ) {\\n\\n\\t\\t\\t\\t\\ttrimSegment( end, start );\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\t// clip space\\n\\t\\t\\tvec4 clipStart = projectionMatrix * start;\\n\\t\\t\\tvec4 clipEnd = projectionMatrix * end;\\n\\n\\t\\t\\t// ndc space\\n\\t\\t\\tvec3 ndcStart = clipStart.xyz / clipStart.w;\\n\\t\\t\\tvec3 ndcEnd = clipEnd.xyz / clipEnd.w;\\n\\n\\t\\t\\t// direction\\n\\t\\t\\tvec2 dir = ndcEnd.xy - ndcStart.xy;\\n\\n\\t\\t\\t// account for clip-space aspect ratio\\n\\t\\t\\tdir.x *= aspect;\\n\\t\\t\\tdir = normalize( dir );\\n\\n\\t\\t\\t#ifdef WORLD_UNITS\\n\\n\\t\\t\\t\\t// get the offset direction as perpendicular to the view vector\\n\\t\\t\\t\\tvec3 worldDir = normalize( end.xyz - start.xyz );\\n\\t\\t\\t\\tvec3 offset;\\n\\t\\t\\t\\tif ( position.y < 0.5 ) {\\n\\n\\t\\t\\t\\t\\toffset = normalize( cross( start.xyz, worldDir ) );\\n\\n\\t\\t\\t\\t} else {\\n\\n\\t\\t\\t\\t\\toffset = normalize( cross( end.xyz, worldDir ) );\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t// sign flip\\n\\t\\t\\t\\tif ( position.x < 0.0 ) offset *= - 1.0;\\n\\n\\t\\t\\t\\tfloat forwardOffset = dot( worldDir, vec3( 0.0, 0.0, 1.0 ) );\\n\\n\\t\\t\\t\\t// don't extend the line if we're rendering dashes because we\\n\\t\\t\\t\\t// won't be rendering the endcaps\\n\\t\\t\\t\\t#ifndef USE_DASH\\n\\n\\t\\t\\t\\t\\t// extend the line bounds to encompass  endcaps\\n\\t\\t\\t\\t\\tstart.xyz += - worldDir * linewidth * 0.5;\\n\\t\\t\\t\\t\\tend.xyz += worldDir * linewidth * 0.5;\\n\\n\\t\\t\\t\\t\\t// shift the position of the quad so it hugs the forward edge of the line\\n\\t\\t\\t\\t\\toffset.xy -= dir * forwardOffset;\\n\\t\\t\\t\\t\\toffset.z += 0.5;\\n\\n\\t\\t\\t\\t#endif\\n\\n\\t\\t\\t\\t// endcaps\\n\\t\\t\\t\\tif ( position.y > 1.0 || position.y < 0.0 ) {\\n\\n\\t\\t\\t\\t\\toffset.xy += dir * 2.0 * forwardOffset;\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t// adjust for linewidth\\n\\t\\t\\t\\toffset *= linewidth * 0.5;\\n\\n\\t\\t\\t\\t// set the world position\\n\\t\\t\\t\\tworldPos = ( position.y < 0.5 ) ? start : end;\\n\\t\\t\\t\\tworldPos.xyz += offset;\\n\\n\\t\\t\\t\\t// project the worldpos\\n\\t\\t\\t\\tvec4 clip = projectionMatrix * worldPos;\\n\\n\\t\\t\\t\\t// shift the depth of the projected points so the line\\n\\t\\t\\t\\t// segements overlap neatly\\n\\t\\t\\t\\tvec3 clipPose = ( position.y < 0.5 ) ? ndcStart : ndcEnd;\\n\\t\\t\\t\\tclip.z = clipPose.z * clip.w;\\n\\n\\t\\t\\t#else\\n\\n\\t\\t\\tvec2 offset = vec2( dir.y, - dir.x );\\n\\t\\t\\t// undo aspect ratio adjustment\\n\\t\\t\\tdir.x /= aspect;\\n\\t\\t\\toffset.x /= aspect;\\n\\n\\t\\t\\t// sign flip\\n\\t\\t\\tif ( position.x < 0.0 ) offset *= - 1.0;\\n\\n\\t\\t\\t// endcaps\\n\\t\\t\\tif ( position.y < 0.0 ) {\\n\\n\\t\\t\\t\\toffset += - dir;\\n\\n\\t\\t\\t} else if ( position.y > 1.0 ) {\\n\\n\\t\\t\\t\\toffset += dir;\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\t// adjust for linewidth\\n\\t\\t\\toffset *= linewidth;\\n\\n\\t\\t\\t// adjust for clip-space to screen-space conversion // maybe resolution should be based on viewport ...\\n\\t\\t\\toffset /= resolution.y;\\n\\n\\t\\t\\t// select end\\n\\t\\t\\tvec4 clip = ( position.y < 0.5 ) ? clipStart : clipEnd;\\n\\n\\t\\t\\t// back to clip space\\n\\t\\t\\toffset *= clip.w;\\n\\n\\t\\t\\tclip.xy += offset;\\n\\n\\t\\t\\t#endif\\n\\n\\t\\t\\tgl_Position = clip;\\n\\n\\t\\t\\tvec4 mvPosition = ( position.y < 0.5 ) ? start : end; // this is an approximation\\n\\n\\t\\t\\t#include <logdepthbuf_vertex>\\n\\t\\t\\t#include <clipping_planes_vertex>\\n\\t\\t\\t#include <fog_vertex>\\n\\n\\t\\t}\\n\\t\\t\",\n  fragmentShader: /* glsl */\"\\n\\t\\tuniform vec3 diffuse;\\n\\t\\tuniform float opacity;\\n\\t\\tuniform float linewidth;\\n\\n\\t\\t#ifdef USE_DASH\\n\\n\\t\\t\\tuniform float dashOffset;\\n\\t\\t\\tuniform float dashSize;\\n\\t\\t\\tuniform float gapSize;\\n\\n\\t\\t#endif\\n\\n\\t\\tvarying float vLineDistance;\\n\\t\\tvarying vec4 worldPos;\\n\\t\\tvarying vec3 worldStart;\\n\\t\\tvarying vec3 worldEnd;\\n\\n\\t\\t#include <common>\\n\\t\\t#include <color_pars_fragment>\\n\\t\\t#include <fog_pars_fragment>\\n\\t\\t#include <logdepthbuf_pars_fragment>\\n\\t\\t#include <clipping_planes_pars_fragment>\\n\\n\\t\\tvarying vec2 vUv;\\n\\n\\t\\tvec2 closestLineToLine(vec3 p1, vec3 p2, vec3 p3, vec3 p4) {\\n\\n\\t\\t\\tfloat mua;\\n\\t\\t\\tfloat mub;\\n\\n\\t\\t\\tvec3 p13 = p1 - p3;\\n\\t\\t\\tvec3 p43 = p4 - p3;\\n\\n\\t\\t\\tvec3 p21 = p2 - p1;\\n\\n\\t\\t\\tfloat d1343 = dot( p13, p43 );\\n\\t\\t\\tfloat d4321 = dot( p43, p21 );\\n\\t\\t\\tfloat d1321 = dot( p13, p21 );\\n\\t\\t\\tfloat d4343 = dot( p43, p43 );\\n\\t\\t\\tfloat d2121 = dot( p21, p21 );\\n\\n\\t\\t\\tfloat denom = d2121 * d4343 - d4321 * d4321;\\n\\n\\t\\t\\tfloat numer = d1343 * d4321 - d1321 * d4343;\\n\\n\\t\\t\\tmua = numer / denom;\\n\\t\\t\\tmua = clamp( mua, 0.0, 1.0 );\\n\\t\\t\\tmub = ( d1343 + d4321 * ( mua ) ) / d4343;\\n\\t\\t\\tmub = clamp( mub, 0.0, 1.0 );\\n\\n\\t\\t\\treturn vec2( mua, mub );\\n\\n\\t\\t}\\n\\n\\t\\tvoid main() {\\n\\n\\t\\t\\t#include <clipping_planes_fragment>\\n\\n\\t\\t\\t#ifdef USE_DASH\\n\\n\\t\\t\\t\\tif ( vUv.y < - 1.0 || vUv.y > 1.0 ) discard; // discard endcaps\\n\\n\\t\\t\\t\\tif ( mod( vLineDistance + dashOffset, dashSize + gapSize ) > dashSize ) discard; // todo - FIX\\n\\n\\t\\t\\t#endif\\n\\n\\t\\t\\tfloat alpha = opacity;\\n\\n\\t\\t\\t#ifdef WORLD_UNITS\\n\\n\\t\\t\\t\\t// Find the closest points on the view ray and the line segment\\n\\t\\t\\t\\tvec3 rayEnd = normalize( worldPos.xyz ) * 1e5;\\n\\t\\t\\t\\tvec3 lineDir = worldEnd - worldStart;\\n\\t\\t\\t\\tvec2 params = closestLineToLine( worldStart, worldEnd, vec3( 0.0, 0.0, 0.0 ), rayEnd );\\n\\n\\t\\t\\t\\tvec3 p1 = worldStart + lineDir * params.x;\\n\\t\\t\\t\\tvec3 p2 = rayEnd * params.y;\\n\\t\\t\\t\\tvec3 delta = p1 - p2;\\n\\t\\t\\t\\tfloat len = length( delta );\\n\\t\\t\\t\\tfloat norm = len / linewidth;\\n\\n\\t\\t\\t\\t#ifndef USE_DASH\\n\\n\\t\\t\\t\\t\\t#ifdef ALPHA_TO_COVERAGE\\n\\n\\t\\t\\t\\t\\t\\tfloat dnorm = fwidth( norm );\\n\\t\\t\\t\\t\\t\\talpha = 1.0 - smoothstep( 0.5 - dnorm, 0.5 + dnorm, norm );\\n\\n\\t\\t\\t\\t\\t#else\\n\\n\\t\\t\\t\\t\\t\\tif ( norm > 0.5 ) {\\n\\n\\t\\t\\t\\t\\t\\t\\tdiscard;\\n\\n\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t#endif\\n\\n\\t\\t\\t#endif\\n\\n\\t\\t\\t#else\\n\\n\\t\\t\\t\\t#ifdef ALPHA_TO_COVERAGE\\n\\n\\t\\t\\t\\t\\t// artifacts appear on some hardware if a derivative is taken within a conditional\\n\\t\\t\\t\\t\\tfloat a = vUv.x;\\n\\t\\t\\t\\t\\tfloat b = ( vUv.y > 0.0 ) ? vUv.y - 1.0 : vUv.y + 1.0;\\n\\t\\t\\t\\t\\tfloat len2 = a * a + b * b;\\n\\t\\t\\t\\t\\tfloat dlen = fwidth( len2 );\\n\\n\\t\\t\\t\\t\\tif ( abs( vUv.y ) > 1.0 ) {\\n\\n\\t\\t\\t\\t\\t\\talpha = 1.0 - smoothstep( 1.0 - dlen, 1.0 + dlen, len2 );\\n\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t#else\\n\\n\\t\\t\\tif ( abs( vUv.y ) > 1.0 ) {\\n\\n\\t\\t\\t\\tfloat a = vUv.x;\\n\\t\\t\\t\\tfloat b = ( vUv.y > 0.0 ) ? vUv.y - 1.0 : vUv.y + 1.0;\\n\\t\\t\\t\\tfloat len2 = a * a + b * b;\\n\\n\\t\\t\\t\\tif ( len2 > 1.0 ) discard;\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\t\\t#endif\\n\\n\\t\\t\\t#endif\\n\\n\\t\\t\\tvec4 diffuseColor = vec4( diffuse, alpha );\\n\\n\\t\\t\\t#include <logdepthbuf_fragment>\\n\\t\\t\\t#include <color_fragment>\\n\\n\\t\\t\\tgl_FragColor = vec4( diffuseColor.rgb, alpha );\\n\\n\\t\\t\\t#include <tonemapping_fragment>\\n\\t\\t\\t#include <encodings_fragment>\\n\\t\\t\\t#include <fog_fragment>\\n\\t\\t\\t#include <premultiplied_alpha_fragment>\\n\\n\\t\\t}\\n\\t\\t\"\n};\nvar LineMaterial = /*#__PURE__*/function (_THREE$1$ShaderMateri) {\n  _inherits(LineMaterial, _THREE$1$ShaderMateri);\n  var _super2 = _createSuper(LineMaterial);\n  function LineMaterial(parameters) {\n    var _this2;\n    _classCallCheck(this, LineMaterial);\n    _this2 = _super2.call(this, {\n      type: 'LineMaterial',\n      uniforms: THREE$1.UniformsUtils.clone(THREE$1.ShaderLib['line'].uniforms),\n      vertexShader: THREE$1.ShaderLib['line'].vertexShader,\n      fragmentShader: THREE$1.ShaderLib['line'].fragmentShader,\n      clipping: true // required for clipping support\n    });\n\n    Object.defineProperties(_assertThisInitialized(_this2), {\n      color: {\n        enumerable: true,\n        get: function get() {\n          return this.uniforms.diffuse.value;\n        },\n        set: function set(value) {\n          this.uniforms.diffuse.value = value;\n        }\n      },\n      worldUnits: {\n        enumerable: true,\n        get: function get() {\n          return 'WORLD_UNITS' in this.defines;\n        },\n        set: function set(value) {\n          if (value === true) {\n            this.defines.WORLD_UNITS = '';\n          } else {\n            delete this.defines.WORLD_UNITS;\n          }\n        }\n      },\n      linewidth: {\n        enumerable: true,\n        get: function get() {\n          return this.uniforms.linewidth.value;\n        },\n        set: function set(value) {\n          this.uniforms.linewidth.value = value;\n        }\n      },\n      dashed: {\n        enumerable: true,\n        get: function get() {\n          return Boolean('USE_DASH' in this.defines);\n        },\n        set: function set(value) {\n          if (Boolean(value) !== Boolean('USE_DASH' in this.defines)) {\n            this.needsUpdate = true;\n          }\n          if (value === true) {\n            this.defines.USE_DASH = '';\n          } else {\n            delete this.defines.USE_DASH;\n          }\n        }\n      },\n      dashScale: {\n        enumerable: true,\n        get: function get() {\n          return this.uniforms.dashScale.value;\n        },\n        set: function set(value) {\n          this.uniforms.dashScale.value = value;\n        }\n      },\n      dashSize: {\n        enumerable: true,\n        get: function get() {\n          return this.uniforms.dashSize.value;\n        },\n        set: function set(value) {\n          this.uniforms.dashSize.value = value;\n        }\n      },\n      dashOffset: {\n        enumerable: true,\n        get: function get() {\n          return this.uniforms.dashOffset.value;\n        },\n        set: function set(value) {\n          this.uniforms.dashOffset.value = value;\n        }\n      },\n      gapSize: {\n        enumerable: true,\n        get: function get() {\n          return this.uniforms.gapSize.value;\n        },\n        set: function set(value) {\n          this.uniforms.gapSize.value = value;\n        }\n      },\n      opacity: {\n        enumerable: true,\n        get: function get() {\n          return this.uniforms.opacity.value;\n        },\n        set: function set(value) {\n          this.uniforms.opacity.value = value;\n        }\n      },\n      resolution: {\n        enumerable: true,\n        get: function get() {\n          return this.uniforms.resolution.value;\n        },\n        set: function set(value) {\n          this.uniforms.resolution.value.copy(value);\n        }\n      },\n      alphaToCoverage: {\n        enumerable: true,\n        get: function get() {\n          return Boolean('ALPHA_TO_COVERAGE' in this.defines);\n        },\n        set: function set(value) {\n          if (Boolean(value) !== Boolean('ALPHA_TO_COVERAGE' in this.defines)) {\n            this.needsUpdate = true;\n          }\n          if (value === true) {\n            this.defines.ALPHA_TO_COVERAGE = '';\n            this.extensions.derivatives = true;\n          } else {\n            delete this.defines.ALPHA_TO_COVERAGE;\n            this.extensions.derivatives = false;\n          }\n        }\n      }\n    });\n    _this2.setValues(parameters);\n    return _this2;\n  }\n  return _createClass(LineMaterial);\n}(THREE$1.ShaderMaterial);\nLineMaterial.prototype.isLineMaterial = true;\nvar THREE = window.THREE ? window.THREE // Prefer consumption from global THREE, if exists\n: {\n  Box3: Box3,\n  BufferGeometry: BufferGeometry,\n  InstancedInterleavedBuffer: InstancedInterleavedBuffer,\n  InterleavedBufferAttribute: InterleavedBufferAttribute,\n  Line3: Line3,\n  MathUtils: MathUtils,\n  Matrix4: Matrix4,\n  Mesh: Mesh,\n  Sphere: Sphere,\n  Vector3: Vector3,\n  Vector4: Vector4\n};\n\n// support both modes for backwards threejs compatibility\nvar setAttributeFn = new THREE.BufferGeometry().setAttribute ? 'setAttribute' : 'addAttribute';\nvar _start = new THREE.Vector3();\nvar _end = new THREE.Vector3();\nvar _start4 = new THREE.Vector4();\nvar _end4 = new THREE.Vector4();\nvar _ssOrigin = new THREE.Vector4();\nvar _ssOrigin3 = new THREE.Vector3();\nvar _mvMatrix = new THREE.Matrix4();\nvar _line = new THREE.Line3();\nvar _closestPoint = new THREE.Vector3();\nvar _box = new THREE.Box3();\nvar _sphere = new THREE.Sphere();\nvar _clipToWorldVector = new THREE.Vector4();\nvar LineSegments2 = /*#__PURE__*/function (_THREE$Mesh) {\n  _inherits(LineSegments2, _THREE$Mesh);\n  var _super3 = _createSuper(LineSegments2);\n  function LineSegments2() {\n    var _this3;\n    var geometry = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new LineSegmentsGeometry();\n    var material = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new LineMaterial({\n      color: Math.random() * 0xffffff\n    });\n    _classCallCheck(this, LineSegments2);\n    _this3 = _super3.call(this, geometry, material);\n    _this3.type = 'LineSegments2';\n    return _this3;\n  } // for backwards-compatability, but could be a method of LineSegmentsGeometry...\n  _createClass(LineSegments2, [{\n    key: \"computeLineDistances\",\n    value: function computeLineDistances() {\n      var geometry = this.geometry;\n      var instanceStart = geometry.attributes.instanceStart;\n      var instanceEnd = geometry.attributes.instanceEnd;\n      var lineDistances = new Float32Array(2 * instanceStart.count);\n      for (var i = 0, j = 0, l = instanceStart.count; i < l; i++, j += 2) {\n        _start.fromBufferAttribute(instanceStart, i);\n        _end.fromBufferAttribute(instanceEnd, i);\n        lineDistances[j] = j === 0 ? 0 : lineDistances[j - 1];\n        lineDistances[j + 1] = lineDistances[j] + _start.distanceTo(_end);\n      }\n      var instanceDistanceBuffer = new THREE.InstancedInterleavedBuffer(lineDistances, 2, 1); // d0, d1\n\n      geometry[setAttributeFn]('instanceDistanceStart', new THREE.InterleavedBufferAttribute(instanceDistanceBuffer, 1, 0)); // d0\n\n      geometry[setAttributeFn]('instanceDistanceEnd', new THREE.InterleavedBufferAttribute(instanceDistanceBuffer, 1, 1)); // d1\n\n      return this;\n    }\n  }, {\n    key: \"raycast\",\n    value: function raycast(raycaster, intersects) {\n      if (raycaster.camera === null) {\n        console.error('LineSegments2: \"Raycaster.camera\" needs to be set in order to raycast against LineSegments2.');\n      }\n      var threshold = raycaster.params.Line2 !== undefined ? raycaster.params.Line2.threshold || 0 : 0;\n      var ray = raycaster.ray;\n      var camera = raycaster.camera;\n      var projectionMatrix = camera.projectionMatrix;\n      var matrixWorld = this.matrixWorld;\n      var geometry = this.geometry;\n      var material = this.material;\n      var resolution = material.resolution;\n      var lineWidth = material.linewidth + threshold;\n      var instanceStart = geometry.attributes.instanceStart;\n      var instanceEnd = geometry.attributes.instanceEnd; // camera forward is negative\n\n      var near = -camera.near; // clip space is [ - 1, 1 ] so multiply by two to get the full\n      // width in clip space\n\n      var ssMaxWidth = 2.0 * Math.max(lineWidth / resolution.width, lineWidth / resolution.height); //\n      // check if we intersect the sphere bounds\n\n      if (geometry.boundingSphere === null) {\n        geometry.computeBoundingSphere();\n      }\n      _sphere.copy(geometry.boundingSphere).applyMatrix4(matrixWorld);\n      var distanceToSphere = Math.max(camera.near, _sphere.distanceToPoint(ray.origin)); // get the w component to scale the world space line width\n\n      _clipToWorldVector.set(0, 0, -distanceToSphere, 1.0).applyMatrix4(camera.projectionMatrix);\n      _clipToWorldVector.multiplyScalar(1.0 / _clipToWorldVector.w);\n      _clipToWorldVector.applyMatrix4(camera.projectionMatrixInverse); // increase the sphere bounds by the worst case line screen space width\n\n      var sphereMargin = Math.abs(ssMaxWidth / _clipToWorldVector.w) * 0.5;\n      _sphere.radius += sphereMargin;\n      if (raycaster.ray.intersectsSphere(_sphere) === false) {\n        return;\n      } //\n      // check if we intersect the box bounds\n\n      if (geometry.boundingBox === null) {\n        geometry.computeBoundingBox();\n      }\n      _box.copy(geometry.boundingBox).applyMatrix4(matrixWorld);\n      var distanceToBox = Math.max(camera.near, _box.distanceToPoint(ray.origin)); // get the w component to scale the world space line width\n\n      _clipToWorldVector.set(0, 0, -distanceToBox, 1.0).applyMatrix4(camera.projectionMatrix);\n      _clipToWorldVector.multiplyScalar(1.0 / _clipToWorldVector.w);\n      _clipToWorldVector.applyMatrix4(camera.projectionMatrixInverse); // increase the sphere bounds by the worst case line screen space width\n\n      var boxMargin = Math.abs(ssMaxWidth / _clipToWorldVector.w) * 0.5;\n      _box.max.x += boxMargin;\n      _box.max.y += boxMargin;\n      _box.max.z += boxMargin;\n      _box.min.x -= boxMargin;\n      _box.min.y -= boxMargin;\n      _box.min.z -= boxMargin;\n      if (raycaster.ray.intersectsBox(_box) === false) {\n        return;\n      } //\n      // pick a point 1 unit out along the ray to avoid the ray origin\n      // sitting at the camera origin which will cause \"w\" to be 0 when\n      // applying the projection matrix.\n\n      ray.at(1, _ssOrigin); // ndc space [ - 1.0, 1.0 ]\n\n      _ssOrigin.w = 1;\n      _ssOrigin.applyMatrix4(camera.matrixWorldInverse);\n      _ssOrigin.applyMatrix4(projectionMatrix);\n      _ssOrigin.multiplyScalar(1 / _ssOrigin.w); // screen space\n\n      _ssOrigin.x *= resolution.x / 2;\n      _ssOrigin.y *= resolution.y / 2;\n      _ssOrigin.z = 0;\n      _ssOrigin3.copy(_ssOrigin);\n      _mvMatrix.multiplyMatrices(camera.matrixWorldInverse, matrixWorld);\n      for (var i = 0, l = instanceStart.count; i < l; i++) {\n        _start4.fromBufferAttribute(instanceStart, i);\n        _end4.fromBufferAttribute(instanceEnd, i);\n        _start4.w = 1;\n        _end4.w = 1; // camera space\n\n        _start4.applyMatrix4(_mvMatrix);\n        _end4.applyMatrix4(_mvMatrix); // skip the segment if it's entirely behind the camera\n\n        var isBehindCameraNear = _start4.z > near && _end4.z > near;\n        if (isBehindCameraNear) {\n          continue;\n        } // trim the segment if it extends behind camera near\n\n        if (_start4.z > near) {\n          var deltaDist = _start4.z - _end4.z;\n          var t = (_start4.z - near) / deltaDist;\n          _start4.lerp(_end4, t);\n        } else if (_end4.z > near) {\n          var _deltaDist = _end4.z - _start4.z;\n          var _t = (_end4.z - near) / _deltaDist;\n          _end4.lerp(_start4, _t);\n        } // clip space\n\n        _start4.applyMatrix4(projectionMatrix);\n        _end4.applyMatrix4(projectionMatrix); // ndc space [ - 1.0, 1.0 ]\n\n        _start4.multiplyScalar(1 / _start4.w);\n        _end4.multiplyScalar(1 / _end4.w); // screen space\n\n        _start4.x *= resolution.x / 2;\n        _start4.y *= resolution.y / 2;\n        _end4.x *= resolution.x / 2;\n        _end4.y *= resolution.y / 2; // create 2d segment\n\n        _line.start.copy(_start4);\n        _line.start.z = 0;\n        _line.end.copy(_end4);\n        _line.end.z = 0; // get closest point on ray to segment\n\n        var param = _line.closestPointToPointParameter(_ssOrigin3, true);\n        _line.at(param, _closestPoint); // check if the intersection point is within clip space\n\n        var zPos = THREE.MathUtils.lerp(_start4.z, _end4.z, param);\n        var isInClipSpace = zPos >= -1 && zPos <= 1;\n        var isInside = _ssOrigin3.distanceTo(_closestPoint) < lineWidth * 0.5;\n        if (isInClipSpace && isInside) {\n          _line.start.fromBufferAttribute(instanceStart, i);\n          _line.end.fromBufferAttribute(instanceEnd, i);\n          _line.start.applyMatrix4(matrixWorld);\n          _line.end.applyMatrix4(matrixWorld);\n          var pointOnLine = new THREE.Vector3();\n          var point = new THREE.Vector3();\n          ray.distanceSqToSegment(_line.start, _line.end, point, pointOnLine);\n          intersects.push({\n            point: point,\n            pointOnLine: pointOnLine,\n            distance: ray.origin.distanceTo(point),\n            object: this,\n            face: null,\n            faceIndex: i,\n            uv: null,\n            uv2: null\n          });\n        }\n      }\n    }\n  }]);\n  return LineSegments2;\n}(THREE.Mesh);\nLineSegments2.prototype.LineSegments2 = true;\nvar LineGeometry = /*#__PURE__*/function (_LineSegmentsGeometry) {\n  _inherits(LineGeometry, _LineSegmentsGeometry);\n  var _super4 = _createSuper(LineGeometry);\n  function LineGeometry() {\n    var _this4;\n    _classCallCheck(this, LineGeometry);\n    _this4 = _super4.call(this);\n    _this4.type = 'LineGeometry';\n    return _this4;\n  }\n  _createClass(LineGeometry, [{\n    key: \"setPositions\",\n    value: function setPositions(array) {\n      // converts [ x1, y1, z1,  x2, y2, z2, ... ] to pairs format\n      var length = array.length - 3;\n      var points = new Float32Array(2 * length);\n      for (var i = 0; i < length; i += 3) {\n        points[2 * i] = array[i];\n        points[2 * i + 1] = array[i + 1];\n        points[2 * i + 2] = array[i + 2];\n        points[2 * i + 3] = array[i + 3];\n        points[2 * i + 4] = array[i + 4];\n        points[2 * i + 5] = array[i + 5];\n      }\n      _get(_getPrototypeOf(LineGeometry.prototype), \"setPositions\", this).call(this, points);\n      return this;\n    }\n  }, {\n    key: \"setColors\",\n    value: function setColors(array) {\n      // converts [ r1, g1, b1,  r2, g2, b2, ... ] to pairs format\n      var length = array.length - 3;\n      var colors = new Float32Array(2 * length);\n      for (var i = 0; i < length; i += 3) {\n        colors[2 * i] = array[i];\n        colors[2 * i + 1] = array[i + 1];\n        colors[2 * i + 2] = array[i + 2];\n        colors[2 * i + 3] = array[i + 3];\n        colors[2 * i + 4] = array[i + 4];\n        colors[2 * i + 5] = array[i + 5];\n      }\n      _get(_getPrototypeOf(LineGeometry.prototype), \"setColors\", this).call(this, colors);\n      return this;\n    }\n  }, {\n    key: \"fromLine\",\n    value: function fromLine(line) {\n      var geometry = line.geometry;\n      if (geometry.isGeometry) {\n        console.error('THREE.LineGeometry no longer supports Geometry. Use THREE.BufferGeometry instead.');\n        return;\n      } else if (geometry.isBufferGeometry) {\n        this.setPositions(geometry.attributes.position.array); // assumes non-indexed\n      } // set colors, maybe\n\n      return this;\n    }\n  }]);\n  return LineGeometry;\n}(LineSegmentsGeometry);\nLineGeometry.prototype.isLineGeometry = true;\nvar Line2 = /*#__PURE__*/function (_LineSegments) {\n  _inherits(Line2, _LineSegments);\n  var _super5 = _createSuper(Line2);\n  function Line2() {\n    var _this5;\n    var geometry = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new LineGeometry();\n    var material = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new LineMaterial({\n      color: Math.random() * 0xffffff\n    });\n    _classCallCheck(this, Line2);\n    _this5 = _super5.call(this, geometry, material);\n    _this5.type = 'Line2';\n    return _this5;\n  }\n  return _createClass(Line2);\n}(LineSegments2);\nLine2.prototype.isLine2 = true;\nexport { Line2, LineGeometry, LineMaterial, LineSegments2, LineSegmentsGeometry };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}