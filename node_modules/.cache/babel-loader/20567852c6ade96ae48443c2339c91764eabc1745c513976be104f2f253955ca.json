{"ast":null,"code":"import _classCallCheck from \"/Users/stasy/Desktop/Public+Privacy_0831/public-privacy-frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/stasy/Desktop/Public+Privacy_0831/public-privacy-frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/stasy/Desktop/Public+Privacy_0831/public-privacy-frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/stasy/Desktop/Public+Privacy_0831/public-privacy-frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Pass } from './Pass.js';\nvar MaskPass = /*#__PURE__*/function (_Pass) {\n  _inherits(MaskPass, _Pass);\n  var _super = _createSuper(MaskPass);\n  function MaskPass(scene, camera) {\n    var _this;\n    _classCallCheck(this, MaskPass);\n    _this = _super.call(this);\n    _this.scene = scene;\n    _this.camera = camera;\n    _this.clear = true;\n    _this.needsSwap = false;\n    _this.inverse = false;\n    return _this;\n  }\n  _createClass(MaskPass, [{\n    key: \"render\",\n    value: function render(renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */) {\n      var context = renderer.getContext();\n      var state = renderer.state;\n\n      // don't update color or depth\n\n      state.buffers.color.setMask(false);\n      state.buffers.depth.setMask(false);\n\n      // lock buffers\n\n      state.buffers.color.setLocked(true);\n      state.buffers.depth.setLocked(true);\n\n      // set up stencil\n\n      var writeValue, clearValue;\n      if (this.inverse) {\n        writeValue = 0;\n        clearValue = 1;\n      } else {\n        writeValue = 1;\n        clearValue = 0;\n      }\n      state.buffers.stencil.setTest(true);\n      state.buffers.stencil.setOp(context.REPLACE, context.REPLACE, context.REPLACE);\n      state.buffers.stencil.setFunc(context.ALWAYS, writeValue, 0xffffffff);\n      state.buffers.stencil.setClear(clearValue);\n      state.buffers.stencil.setLocked(true);\n\n      // draw into the stencil buffer\n\n      renderer.setRenderTarget(readBuffer);\n      if (this.clear) renderer.clear();\n      renderer.render(this.scene, this.camera);\n      renderer.setRenderTarget(writeBuffer);\n      if (this.clear) renderer.clear();\n      renderer.render(this.scene, this.camera);\n\n      // unlock color and depth buffer and make them writable for subsequent rendering/clearing\n\n      state.buffers.color.setLocked(false);\n      state.buffers.depth.setLocked(false);\n      state.buffers.color.setMask(true);\n      state.buffers.depth.setMask(true);\n\n      // only render where stencil is set to 1\n\n      state.buffers.stencil.setLocked(false);\n      state.buffers.stencil.setFunc(context.EQUAL, 1, 0xffffffff); // draw if == 1\n      state.buffers.stencil.setOp(context.KEEP, context.KEEP, context.KEEP);\n      state.buffers.stencil.setLocked(true);\n    }\n  }]);\n  return MaskPass;\n}(Pass);\nvar ClearMaskPass = /*#__PURE__*/function (_Pass2) {\n  _inherits(ClearMaskPass, _Pass2);\n  var _super2 = _createSuper(ClearMaskPass);\n  function ClearMaskPass() {\n    var _this2;\n    _classCallCheck(this, ClearMaskPass);\n    _this2 = _super2.call(this);\n    _this2.needsSwap = false;\n    return _this2;\n  }\n  _createClass(ClearMaskPass, [{\n    key: \"render\",\n    value: function render(renderer /*, writeBuffer, readBuffer, deltaTime, maskActive */) {\n      renderer.state.buffers.stencil.setLocked(false);\n      renderer.state.buffers.stencil.setTest(false);\n    }\n  }]);\n  return ClearMaskPass;\n}(Pass);\nexport { MaskPass, ClearMaskPass };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}