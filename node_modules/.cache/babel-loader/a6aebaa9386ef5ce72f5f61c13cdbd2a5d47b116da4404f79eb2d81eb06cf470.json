{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/stasy/Desktop/Public+Privacy_0831/public-privacy-frontend/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport { ascending, bisect, quantile } from \"d3-array\";\nimport { identity } from \"./continuous.js\";\nimport { initInterpolator } from \"./init.js\";\nexport default function sequentialQuantile() {\n  var domain = [],\n    interpolator = identity;\n  function scale(x) {\n    if (x != null && !isNaN(x = +x)) return interpolator((bisect(domain, x, 1) - 1) / (domain.length - 1));\n  }\n  scale.domain = function (_) {\n    if (!arguments.length) return domain.slice();\n    domain = [];\n    var _iterator = _createForOfIteratorHelper(_),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var d = _step.value;\n        if (d != null && !isNaN(d = +d)) domain.push(d);\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n    domain.sort(ascending);\n    return scale;\n  };\n  scale.interpolator = function (_) {\n    return arguments.length ? (interpolator = _, scale) : interpolator;\n  };\n  scale.range = function () {\n    return domain.map(function (d, i) {\n      return interpolator(i / (domain.length - 1));\n    });\n  };\n  scale.quantiles = function (n) {\n    return Array.from({\n      length: n + 1\n    }, function (_, i) {\n      return quantile(domain, i / n);\n    });\n  };\n  scale.copy = function () {\n    return sequentialQuantile(interpolator).domain(domain);\n  };\n  return initInterpolator.apply(scale, arguments);\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}