{"ast":null,"code":"import _createClass from \"/Users/stasy/Desktop/Public+Privacy_0831/public-privacy-frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"/Users/stasy/Desktop/Public+Privacy_0831/public-privacy-frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _possibleConstructorReturn from \"/Users/stasy/Desktop/Public+Privacy_0831/public-privacy-frontend/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js\";\nimport _inherits from \"/Users/stasy/Desktop/Public+Privacy_0831/public-privacy-frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/stasy/Desktop/Public+Privacy_0831/public-privacy-frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n/**\n * Text = 3D Text\n *\n * parameters = {\n *  font: <THREE.Font>, // font\n *\n *  size: <float>, // size of the text\n *  height: <float>, // thickness to extrude text\n *  curveSegments: <int>, // number of points on the curves\n *\n *  bevelEnabled: <bool>, // turn on bevel\n *  bevelThickness: <float>, // how deep into text bevel goes\n *  bevelSize: <float>, // how far from text outline (including bevelOffset) is bevel\n *  bevelOffset: <float> // how far from text outline does bevel start\n * }\n */\n\nimport { ExtrudeGeometry } from 'three';\nvar TextGeometry = /*#__PURE__*/function (_ExtrudeGeometry) {\n  _inherits(TextGeometry, _ExtrudeGeometry);\n  var _super = _createSuper(TextGeometry);\n  function TextGeometry(text) {\n    var _this;\n    var parameters = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    _classCallCheck(this, TextGeometry);\n    var font = parameters.font;\n    if (font === undefined) {\n      _this = _super.call(this); // generate default extrude geometry\n    } else {\n      var shapes = font.generateShapes(text, parameters.size);\n\n      // translate parameters to ExtrudeGeometry API\n\n      parameters.depth = parameters.height !== undefined ? parameters.height : 50;\n\n      // defaults\n\n      if (parameters.bevelThickness === undefined) parameters.bevelThickness = 10;\n      if (parameters.bevelSize === undefined) parameters.bevelSize = 8;\n      if (parameters.bevelEnabled === undefined) parameters.bevelEnabled = false;\n      _this = _super.call(this, shapes, parameters);\n    }\n    _this.type = 'TextGeometry';\n    return _possibleConstructorReturn(_this);\n  }\n  return _createClass(TextGeometry);\n}(ExtrudeGeometry);\nexport { TextGeometry };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}