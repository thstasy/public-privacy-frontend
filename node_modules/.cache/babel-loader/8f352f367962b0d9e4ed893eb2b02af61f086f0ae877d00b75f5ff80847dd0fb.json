{"ast":null,"code":"/**\n * The Ease class provides a collection of easing functions for use with tween.js.\n */\nvar Easing = Object.freeze({\n  Linear: Object.freeze({\n    None: function None(amount) {\n      return amount;\n    },\n    In: function In(amount) {\n      return this.None(amount);\n    },\n    Out: function Out(amount) {\n      return this.None(amount);\n    },\n    InOut: function InOut(amount) {\n      return this.None(amount);\n    }\n  }),\n  Quadratic: Object.freeze({\n    In: function In(amount) {\n      return amount * amount;\n    },\n    Out: function Out(amount) {\n      return amount * (2 - amount);\n    },\n    InOut: function InOut(amount) {\n      if ((amount *= 2) < 1) {\n        return 0.5 * amount * amount;\n      }\n      return -0.5 * (--amount * (amount - 2) - 1);\n    }\n  }),\n  Cubic: Object.freeze({\n    In: function In(amount) {\n      return amount * amount * amount;\n    },\n    Out: function Out(amount) {\n      return --amount * amount * amount + 1;\n    },\n    InOut: function InOut(amount) {\n      if ((amount *= 2) < 1) {\n        return 0.5 * amount * amount * amount;\n      }\n      return 0.5 * ((amount -= 2) * amount * amount + 2);\n    }\n  }),\n  Quartic: Object.freeze({\n    In: function In(amount) {\n      return amount * amount * amount * amount;\n    },\n    Out: function Out(amount) {\n      return 1 - --amount * amount * amount * amount;\n    },\n    InOut: function InOut(amount) {\n      if ((amount *= 2) < 1) {\n        return 0.5 * amount * amount * amount * amount;\n      }\n      return -0.5 * ((amount -= 2) * amount * amount * amount - 2);\n    }\n  }),\n  Quintic: Object.freeze({\n    In: function In(amount) {\n      return amount * amount * amount * amount * amount;\n    },\n    Out: function Out(amount) {\n      return --amount * amount * amount * amount * amount + 1;\n    },\n    InOut: function InOut(amount) {\n      if ((amount *= 2) < 1) {\n        return 0.5 * amount * amount * amount * amount * amount;\n      }\n      return 0.5 * ((amount -= 2) * amount * amount * amount * amount + 2);\n    }\n  }),\n  Sinusoidal: Object.freeze({\n    In: function In(amount) {\n      return 1 - Math.sin((1.0 - amount) * Math.PI / 2);\n    },\n    Out: function Out(amount) {\n      return Math.sin(amount * Math.PI / 2);\n    },\n    InOut: function InOut(amount) {\n      return 0.5 * (1 - Math.sin(Math.PI * (0.5 - amount)));\n    }\n  }),\n  Exponential: Object.freeze({\n    In: function In(amount) {\n      return amount === 0 ? 0 : Math.pow(1024, amount - 1);\n    },\n    Out: function Out(amount) {\n      return amount === 1 ? 1 : 1 - Math.pow(2, -10 * amount);\n    },\n    InOut: function InOut(amount) {\n      if (amount === 0) {\n        return 0;\n      }\n      if (amount === 1) {\n        return 1;\n      }\n      if ((amount *= 2) < 1) {\n        return 0.5 * Math.pow(1024, amount - 1);\n      }\n      return 0.5 * (-Math.pow(2, -10 * (amount - 1)) + 2);\n    }\n  }),\n  Circular: Object.freeze({\n    In: function In(amount) {\n      return 1 - Math.sqrt(1 - amount * amount);\n    },\n    Out: function Out(amount) {\n      return Math.sqrt(1 - --amount * amount);\n    },\n    InOut: function InOut(amount) {\n      if ((amount *= 2) < 1) {\n        return -0.5 * (Math.sqrt(1 - amount * amount) - 1);\n      }\n      return 0.5 * (Math.sqrt(1 - (amount -= 2) * amount) + 1);\n    }\n  }),\n  Elastic: Object.freeze({\n    In: function In(amount) {\n      if (amount === 0) {\n        return 0;\n      }\n      if (amount === 1) {\n        return 1;\n      }\n      return -Math.pow(2, 10 * (amount - 1)) * Math.sin((amount - 1.1) * 5 * Math.PI);\n    },\n    Out: function Out(amount) {\n      if (amount === 0) {\n        return 0;\n      }\n      if (amount === 1) {\n        return 1;\n      }\n      return Math.pow(2, -10 * amount) * Math.sin((amount - 0.1) * 5 * Math.PI) + 1;\n    },\n    InOut: function InOut(amount) {\n      if (amount === 0) {\n        return 0;\n      }\n      if (amount === 1) {\n        return 1;\n      }\n      amount *= 2;\n      if (amount < 1) {\n        return -0.5 * Math.pow(2, 10 * (amount - 1)) * Math.sin((amount - 1.1) * 5 * Math.PI);\n      }\n      return 0.5 * Math.pow(2, -10 * (amount - 1)) * Math.sin((amount - 1.1) * 5 * Math.PI) + 1;\n    }\n  }),\n  Back: Object.freeze({\n    In: function In(amount) {\n      var s = 1.70158;\n      return amount === 1 ? 1 : amount * amount * ((s + 1) * amount - s);\n    },\n    Out: function Out(amount) {\n      var s = 1.70158;\n      return amount === 0 ? 0 : --amount * amount * ((s + 1) * amount + s) + 1;\n    },\n    InOut: function InOut(amount) {\n      var s = 1.70158 * 1.525;\n      if ((amount *= 2) < 1) {\n        return 0.5 * (amount * amount * ((s + 1) * amount - s));\n      }\n      return 0.5 * ((amount -= 2) * amount * ((s + 1) * amount + s) + 2);\n    }\n  }),\n  Bounce: Object.freeze({\n    In: function In(amount) {\n      return 1 - Easing.Bounce.Out(1 - amount);\n    },\n    Out: function Out(amount) {\n      if (amount < 1 / 2.75) {\n        return 7.5625 * amount * amount;\n      } else if (amount < 2 / 2.75) {\n        return 7.5625 * (amount -= 1.5 / 2.75) * amount + 0.75;\n      } else if (amount < 2.5 / 2.75) {\n        return 7.5625 * (amount -= 2.25 / 2.75) * amount + 0.9375;\n      } else {\n        return 7.5625 * (amount -= 2.625 / 2.75) * amount + 0.984375;\n      }\n    },\n    InOut: function InOut(amount) {\n      if (amount < 0.5) {\n        return Easing.Bounce.In(amount * 2) * 0.5;\n      }\n      return Easing.Bounce.Out(amount * 2 - 1) * 0.5 + 0.5;\n    }\n  }),\n  generatePow: function generatePow(power) {\n    if (power === void 0) {\n      power = 4;\n    }\n    power = power < Number.EPSILON ? Number.EPSILON : power;\n    power = power > 10000 ? 10000 : power;\n    return {\n      In: function In(amount) {\n        return Math.pow(amount, power);\n      },\n      Out: function Out(amount) {\n        return 1 - Math.pow(1 - amount, power);\n      },\n      InOut: function InOut(amount) {\n        if (amount < 0.5) {\n          return Math.pow(amount * 2, power) / 2;\n        }\n        return (1 - Math.pow(2 - amount * 2, power)) / 2 + 0.5;\n      }\n    };\n  }\n});\nvar now = function now() {\n  return performance.now();\n};\n\n/**\n * Controlling groups of tweens\n *\n * Using the TWEEN singleton to manage your tweens can cause issues in large apps with many components.\n * In these cases, you may want to create your own smaller groups of tween\n */\nvar Group = /** @class */function () {\n  function Group() {\n    this._tweens = {};\n    this._tweensAddedDuringUpdate = {};\n  }\n  Group.prototype.getAll = function () {\n    var _this = this;\n    return Object.keys(this._tweens).map(function (tweenId) {\n      return _this._tweens[tweenId];\n    });\n  };\n  Group.prototype.removeAll = function () {\n    this._tweens = {};\n  };\n  Group.prototype.add = function (tween) {\n    this._tweens[tween.getId()] = tween;\n    this._tweensAddedDuringUpdate[tween.getId()] = tween;\n  };\n  Group.prototype.remove = function (tween) {\n    delete this._tweens[tween.getId()];\n    delete this._tweensAddedDuringUpdate[tween.getId()];\n  };\n  Group.prototype.update = function (time, preserve) {\n    if (time === void 0) {\n      time = now();\n    }\n    if (preserve === void 0) {\n      preserve = false;\n    }\n    var tweenIds = Object.keys(this._tweens);\n    if (tweenIds.length === 0) {\n      return false;\n    }\n    // Tweens are updated in \"batches\". If you add a new tween during an\n    // update, then the new tween will be updated in the next batch.\n    // If you remove a tween during an update, it may or may not be updated.\n    // However, if the removed tween was added during the current batch,\n    // then it will not be updated.\n    while (tweenIds.length > 0) {\n      this._tweensAddedDuringUpdate = {};\n      for (var i = 0; i < tweenIds.length; i++) {\n        var tween = this._tweens[tweenIds[i]];\n        var autoStart = !preserve;\n        if (tween && tween.update(time, autoStart) === false && !preserve) {\n          delete this._tweens[tweenIds[i]];\n        }\n      }\n      tweenIds = Object.keys(this._tweensAddedDuringUpdate);\n    }\n    return true;\n  };\n  return Group;\n}();\n\n/**\n *\n */\nvar Interpolation = {\n  Linear: function Linear(v, k) {\n    var m = v.length - 1;\n    var f = m * k;\n    var i = Math.floor(f);\n    var fn = Interpolation.Utils.Linear;\n    if (k < 0) {\n      return fn(v[0], v[1], f);\n    }\n    if (k > 1) {\n      return fn(v[m], v[m - 1], m - f);\n    }\n    return fn(v[i], v[i + 1 > m ? m : i + 1], f - i);\n  },\n  Bezier: function Bezier(v, k) {\n    var b = 0;\n    var n = v.length - 1;\n    var pw = Math.pow;\n    var bn = Interpolation.Utils.Bernstein;\n    for (var i = 0; i <= n; i++) {\n      b += pw(1 - k, n - i) * pw(k, i) * v[i] * bn(n, i);\n    }\n    return b;\n  },\n  CatmullRom: function CatmullRom(v, k) {\n    var m = v.length - 1;\n    var f = m * k;\n    var i = Math.floor(f);\n    var fn = Interpolation.Utils.CatmullRom;\n    if (v[0] === v[m]) {\n      if (k < 0) {\n        i = Math.floor(f = m * (1 + k));\n      }\n      return fn(v[(i - 1 + m) % m], v[i], v[(i + 1) % m], v[(i + 2) % m], f - i);\n    } else {\n      if (k < 0) {\n        return v[0] - (fn(v[0], v[0], v[1], v[1], -f) - v[0]);\n      }\n      if (k > 1) {\n        return v[m] - (fn(v[m], v[m], v[m - 1], v[m - 1], f - m) - v[m]);\n      }\n      return fn(v[i ? i - 1 : 0], v[i], v[m < i + 1 ? m : i + 1], v[m < i + 2 ? m : i + 2], f - i);\n    }\n  },\n  Utils: {\n    Linear: function Linear(p0, p1, t) {\n      return (p1 - p0) * t + p0;\n    },\n    Bernstein: function Bernstein(n, i) {\n      var fc = Interpolation.Utils.Factorial;\n      return fc(n) / fc(i) / fc(n - i);\n    },\n    Factorial: function () {\n      var a = [1];\n      return function (n) {\n        var s = 1;\n        if (a[n]) {\n          return a[n];\n        }\n        for (var i = n; i > 1; i--) {\n          s *= i;\n        }\n        a[n] = s;\n        return s;\n      };\n    }(),\n    CatmullRom: function CatmullRom(p0, p1, p2, p3, t) {\n      var v0 = (p2 - p0) * 0.5;\n      var v1 = (p3 - p1) * 0.5;\n      var t2 = t * t;\n      var t3 = t * t2;\n      return (2 * p1 - 2 * p2 + v0 + v1) * t3 + (-3 * p1 + 3 * p2 - 2 * v0 - v1) * t2 + v0 * t + p1;\n    }\n  }\n};\n\n/**\n * Utils\n */\nvar Sequence = /** @class */function () {\n  function Sequence() {}\n  Sequence.nextId = function () {\n    return Sequence._nextId++;\n  };\n  Sequence._nextId = 0;\n  return Sequence;\n}();\nvar mainGroup = new Group();\n\n/**\n * Tween.js - Licensed under the MIT license\n * https://github.com/tweenjs/tween.js\n * ----------------------------------------------\n *\n * See https://github.com/tweenjs/tween.js/graphs/contributors for the full list of contributors.\n * Thank you all, you're awesome!\n */\nvar Tween = /** @class */function () {\n  function Tween(_object, _group) {\n    if (_group === void 0) {\n      _group = mainGroup;\n    }\n    this._object = _object;\n    this._group = _group;\n    this._isPaused = false;\n    this._pauseStart = 0;\n    this._valuesStart = {};\n    this._valuesEnd = {};\n    this._valuesStartRepeat = {};\n    this._duration = 1000;\n    this._isDynamic = false;\n    this._initialRepeat = 0;\n    this._repeat = 0;\n    this._yoyo = false;\n    this._isPlaying = false;\n    this._reversed = false;\n    this._delayTime = 0;\n    this._startTime = 0;\n    this._easingFunction = Easing.Linear.None;\n    this._interpolationFunction = Interpolation.Linear;\n    // eslint-disable-next-line\n    this._chainedTweens = [];\n    this._onStartCallbackFired = false;\n    this._onEveryStartCallbackFired = false;\n    this._id = Sequence.nextId();\n    this._isChainStopped = false;\n    this._propertiesAreSetUp = false;\n    this._goToEnd = false;\n  }\n  Tween.prototype.getId = function () {\n    return this._id;\n  };\n  Tween.prototype.isPlaying = function () {\n    return this._isPlaying;\n  };\n  Tween.prototype.isPaused = function () {\n    return this._isPaused;\n  };\n  Tween.prototype.to = function (target, duration) {\n    if (duration === void 0) {\n      duration = 1000;\n    }\n    if (this._isPlaying) throw new Error('Can not call Tween.to() while Tween is already started or paused. Stop the Tween first.');\n    this._valuesEnd = target;\n    this._propertiesAreSetUp = false;\n    this._duration = duration;\n    return this;\n  };\n  Tween.prototype.duration = function (duration) {\n    if (duration === void 0) {\n      duration = 1000;\n    }\n    this._duration = duration;\n    return this;\n  };\n  Tween.prototype.dynamic = function (dynamic) {\n    if (dynamic === void 0) {\n      dynamic = false;\n    }\n    this._isDynamic = dynamic;\n    return this;\n  };\n  Tween.prototype.start = function (time, overrideStartingValues) {\n    if (time === void 0) {\n      time = now();\n    }\n    if (overrideStartingValues === void 0) {\n      overrideStartingValues = false;\n    }\n    if (this._isPlaying) {\n      return this;\n    }\n    // eslint-disable-next-line\n    this._group && this._group.add(this);\n    this._repeat = this._initialRepeat;\n    if (this._reversed) {\n      // If we were reversed (f.e. using the yoyo feature) then we need to\n      // flip the tween direction back to forward.\n      this._reversed = false;\n      for (var property in this._valuesStartRepeat) {\n        this._swapEndStartRepeatValues(property);\n        this._valuesStart[property] = this._valuesStartRepeat[property];\n      }\n    }\n    this._isPlaying = true;\n    this._isPaused = false;\n    this._onStartCallbackFired = false;\n    this._onEveryStartCallbackFired = false;\n    this._isChainStopped = false;\n    this._startTime = time;\n    this._startTime += this._delayTime;\n    if (!this._propertiesAreSetUp || overrideStartingValues) {\n      this._propertiesAreSetUp = true;\n      // If dynamic is not enabled, clone the end values instead of using the passed-in end values.\n      if (!this._isDynamic) {\n        var tmp = {};\n        for (var prop in this._valuesEnd) tmp[prop] = this._valuesEnd[prop];\n        this._valuesEnd = tmp;\n      }\n      this._setupProperties(this._object, this._valuesStart, this._valuesEnd, this._valuesStartRepeat, overrideStartingValues);\n    }\n    return this;\n  };\n  Tween.prototype.startFromCurrentValues = function (time) {\n    return this.start(time, true);\n  };\n  Tween.prototype._setupProperties = function (_object, _valuesStart, _valuesEnd, _valuesStartRepeat, overrideStartingValues) {\n    for (var property in _valuesEnd) {\n      var startValue = _object[property];\n      var startValueIsArray = Array.isArray(startValue);\n      var propType = startValueIsArray ? 'array' : typeof startValue;\n      var isInterpolationList = !startValueIsArray && Array.isArray(_valuesEnd[property]);\n      // If `to()` specifies a property that doesn't exist in the source object,\n      // we should not set that property in the object\n      if (propType === 'undefined' || propType === 'function') {\n        continue;\n      }\n      // Check if an Array was provided as property value\n      if (isInterpolationList) {\n        var endValues = _valuesEnd[property];\n        if (endValues.length === 0) {\n          continue;\n        }\n        // Handle an array of relative values.\n        // Creates a local copy of the Array with the start value at the front\n        var temp = [startValue];\n        for (var i = 0, l = endValues.length; i < l; i += 1) {\n          var value = this._handleRelativeValue(startValue, endValues[i]);\n          if (isNaN(value)) {\n            isInterpolationList = false;\n            console.warn('Found invalid interpolation list. Skipping.');\n            break;\n          }\n          temp.push(value);\n        }\n        if (isInterpolationList) {\n          // if (_valuesStart[property] === undefined) { // handle end values only the first time. NOT NEEDED? setupProperties is now guarded by _propertiesAreSetUp.\n          _valuesEnd[property] = temp;\n          // }\n        }\n      }\n      // handle the deepness of the values\n      if ((propType === 'object' || startValueIsArray) && startValue && !isInterpolationList) {\n        _valuesStart[property] = startValueIsArray ? [] : {};\n        var nestedObject = startValue;\n        for (var prop in nestedObject) {\n          _valuesStart[property][prop] = nestedObject[prop];\n        }\n        // TODO? repeat nested values? And yoyo? And array values?\n        _valuesStartRepeat[property] = startValueIsArray ? [] : {};\n        var endValues = _valuesEnd[property];\n        // If dynamic is not enabled, clone the end values instead of using the passed-in end values.\n        if (!this._isDynamic) {\n          var tmp = {};\n          for (var prop in endValues) tmp[prop] = endValues[prop];\n          _valuesEnd[property] = endValues = tmp;\n        }\n        this._setupProperties(nestedObject, _valuesStart[property], endValues, _valuesStartRepeat[property], overrideStartingValues);\n      } else {\n        // Save the starting value, but only once unless override is requested.\n        if (typeof _valuesStart[property] === 'undefined' || overrideStartingValues) {\n          _valuesStart[property] = startValue;\n        }\n        if (!startValueIsArray) {\n          // eslint-disable-next-line\n          // @ts-ignore FIXME?\n          _valuesStart[property] *= 1.0; // Ensures we're using numbers, not strings\n        }\n\n        if (isInterpolationList) {\n          // eslint-disable-next-line\n          // @ts-ignore FIXME?\n          _valuesStartRepeat[property] = _valuesEnd[property].slice().reverse();\n        } else {\n          _valuesStartRepeat[property] = _valuesStart[property] || 0;\n        }\n      }\n    }\n  };\n  Tween.prototype.stop = function () {\n    if (!this._isChainStopped) {\n      this._isChainStopped = true;\n      this.stopChainedTweens();\n    }\n    if (!this._isPlaying) {\n      return this;\n    }\n    // eslint-disable-next-line\n    this._group && this._group.remove(this);\n    this._isPlaying = false;\n    this._isPaused = false;\n    if (this._onStopCallback) {\n      this._onStopCallback(this._object);\n    }\n    return this;\n  };\n  Tween.prototype.end = function () {\n    this._goToEnd = true;\n    this.update(Infinity);\n    return this;\n  };\n  Tween.prototype.pause = function (time) {\n    if (time === void 0) {\n      time = now();\n    }\n    if (this._isPaused || !this._isPlaying) {\n      return this;\n    }\n    this._isPaused = true;\n    this._pauseStart = time;\n    // eslint-disable-next-line\n    this._group && this._group.remove(this);\n    return this;\n  };\n  Tween.prototype.resume = function (time) {\n    if (time === void 0) {\n      time = now();\n    }\n    if (!this._isPaused || !this._isPlaying) {\n      return this;\n    }\n    this._isPaused = false;\n    this._startTime += time - this._pauseStart;\n    this._pauseStart = 0;\n    // eslint-disable-next-line\n    this._group && this._group.add(this);\n    return this;\n  };\n  Tween.prototype.stopChainedTweens = function () {\n    for (var i = 0, numChainedTweens = this._chainedTweens.length; i < numChainedTweens; i++) {\n      this._chainedTweens[i].stop();\n    }\n    return this;\n  };\n  Tween.prototype.group = function (group) {\n    if (group === void 0) {\n      group = mainGroup;\n    }\n    this._group = group;\n    return this;\n  };\n  Tween.prototype.delay = function (amount) {\n    if (amount === void 0) {\n      amount = 0;\n    }\n    this._delayTime = amount;\n    return this;\n  };\n  Tween.prototype.repeat = function (times) {\n    if (times === void 0) {\n      times = 0;\n    }\n    this._initialRepeat = times;\n    this._repeat = times;\n    return this;\n  };\n  Tween.prototype.repeatDelay = function (amount) {\n    this._repeatDelayTime = amount;\n    return this;\n  };\n  Tween.prototype.yoyo = function (yoyo) {\n    if (yoyo === void 0) {\n      yoyo = false;\n    }\n    this._yoyo = yoyo;\n    return this;\n  };\n  Tween.prototype.easing = function (easingFunction) {\n    if (easingFunction === void 0) {\n      easingFunction = Easing.Linear.None;\n    }\n    this._easingFunction = easingFunction;\n    return this;\n  };\n  Tween.prototype.interpolation = function (interpolationFunction) {\n    if (interpolationFunction === void 0) {\n      interpolationFunction = Interpolation.Linear;\n    }\n    this._interpolationFunction = interpolationFunction;\n    return this;\n  };\n  // eslint-disable-next-line\n  Tween.prototype.chain = function () {\n    var tweens = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      tweens[_i] = arguments[_i];\n    }\n    this._chainedTweens = tweens;\n    return this;\n  };\n  Tween.prototype.onStart = function (callback) {\n    this._onStartCallback = callback;\n    return this;\n  };\n  Tween.prototype.onEveryStart = function (callback) {\n    this._onEveryStartCallback = callback;\n    return this;\n  };\n  Tween.prototype.onUpdate = function (callback) {\n    this._onUpdateCallback = callback;\n    return this;\n  };\n  Tween.prototype.onRepeat = function (callback) {\n    this._onRepeatCallback = callback;\n    return this;\n  };\n  Tween.prototype.onComplete = function (callback) {\n    this._onCompleteCallback = callback;\n    return this;\n  };\n  Tween.prototype.onStop = function (callback) {\n    this._onStopCallback = callback;\n    return this;\n  };\n  /**\n   * @returns true if the tween is still playing after the update, false\n   * otherwise (calling update on a paused tween still returns true because\n   * it is still playing, just paused).\n   */\n  Tween.prototype.update = function (time, autoStart) {\n    if (time === void 0) {\n      time = now();\n    }\n    if (autoStart === void 0) {\n      autoStart = true;\n    }\n    if (this._isPaused) return true;\n    var property;\n    var elapsed;\n    var endTime = this._startTime + this._duration;\n    if (!this._goToEnd && !this._isPlaying) {\n      if (time > endTime) return false;\n      if (autoStart) this.start(time, true);\n    }\n    this._goToEnd = false;\n    if (time < this._startTime) {\n      return true;\n    }\n    if (this._onStartCallbackFired === false) {\n      if (this._onStartCallback) {\n        this._onStartCallback(this._object);\n      }\n      this._onStartCallbackFired = true;\n    }\n    if (this._onEveryStartCallbackFired === false) {\n      if (this._onEveryStartCallback) {\n        this._onEveryStartCallback(this._object);\n      }\n      this._onEveryStartCallbackFired = true;\n    }\n    elapsed = (time - this._startTime) / this._duration;\n    elapsed = this._duration === 0 || elapsed > 1 ? 1 : elapsed;\n    var value = this._easingFunction(elapsed);\n    // properties transformations\n    this._updateProperties(this._object, this._valuesStart, this._valuesEnd, value);\n    if (this._onUpdateCallback) {\n      this._onUpdateCallback(this._object, elapsed);\n    }\n    if (elapsed === 1) {\n      if (this._repeat > 0) {\n        if (isFinite(this._repeat)) {\n          this._repeat--;\n        }\n        // Reassign starting values, restart by making startTime = now\n        for (property in this._valuesStartRepeat) {\n          if (!this._yoyo && typeof this._valuesEnd[property] === 'string') {\n            this._valuesStartRepeat[property] =\n            // eslint-disable-next-line\n            // @ts-ignore FIXME?\n            this._valuesStartRepeat[property] + parseFloat(this._valuesEnd[property]);\n          }\n          if (this._yoyo) {\n            this._swapEndStartRepeatValues(property);\n          }\n          this._valuesStart[property] = this._valuesStartRepeat[property];\n        }\n        if (this._yoyo) {\n          this._reversed = !this._reversed;\n        }\n        if (this._repeatDelayTime !== undefined) {\n          this._startTime = time + this._repeatDelayTime;\n        } else {\n          this._startTime = time + this._delayTime;\n        }\n        if (this._onRepeatCallback) {\n          this._onRepeatCallback(this._object);\n        }\n        this._onEveryStartCallbackFired = false;\n        return true;\n      } else {\n        if (this._onCompleteCallback) {\n          this._onCompleteCallback(this._object);\n        }\n        for (var i = 0, numChainedTweens = this._chainedTweens.length; i < numChainedTweens; i++) {\n          // Make the chained tweens start exactly at the time they should,\n          // even if the `update()` method was called way past the duration of the tween\n          this._chainedTweens[i].start(this._startTime + this._duration, false);\n        }\n        this._isPlaying = false;\n        return false;\n      }\n    }\n    return true;\n  };\n  Tween.prototype._updateProperties = function (_object, _valuesStart, _valuesEnd, value) {\n    for (var property in _valuesEnd) {\n      // Don't update properties that do not exist in the source object\n      if (_valuesStart[property] === undefined) {\n        continue;\n      }\n      var start = _valuesStart[property] || 0;\n      var end = _valuesEnd[property];\n      var startIsArray = Array.isArray(_object[property]);\n      var endIsArray = Array.isArray(end);\n      var isInterpolationList = !startIsArray && endIsArray;\n      if (isInterpolationList) {\n        _object[property] = this._interpolationFunction(end, value);\n      } else if (typeof end === 'object' && end) {\n        // eslint-disable-next-line\n        // @ts-ignore FIXME?\n        this._updateProperties(_object[property], start, end, value);\n      } else {\n        // Parses relative end values with start as base (e.g.: +10, -3)\n        end = this._handleRelativeValue(start, end);\n        // Protect against non numeric properties.\n        if (typeof end === 'number') {\n          // eslint-disable-next-line\n          // @ts-ignore FIXME?\n          _object[property] = start + (end - start) * value;\n        }\n      }\n    }\n  };\n  Tween.prototype._handleRelativeValue = function (start, end) {\n    if (typeof end !== 'string') {\n      return end;\n    }\n    if (end.charAt(0) === '+' || end.charAt(0) === '-') {\n      return start + parseFloat(end);\n    }\n    return parseFloat(end);\n  };\n  Tween.prototype._swapEndStartRepeatValues = function (property) {\n    var tmp = this._valuesStartRepeat[property];\n    var endValue = this._valuesEnd[property];\n    if (typeof endValue === 'string') {\n      this._valuesStartRepeat[property] = this._valuesStartRepeat[property] + parseFloat(endValue);\n    } else {\n      this._valuesStartRepeat[property] = this._valuesEnd[property];\n    }\n    this._valuesEnd[property] = tmp;\n  };\n  return Tween;\n}();\nvar VERSION = '21.0.0';\n\n/**\n * Tween.js - Licensed under the MIT license\n * https://github.com/tweenjs/tween.js\n * ----------------------------------------------\n *\n * See https://github.com/tweenjs/tween.js/graphs/contributors for the full list of contributors.\n * Thank you all, you're awesome!\n */\nvar nextId = Sequence.nextId;\n/**\n * Controlling groups of tweens\n *\n * Using the TWEEN singleton to manage your tweens can cause issues in large apps with many components.\n * In these cases, you may want to create your own smaller groups of tweens.\n */\nvar TWEEN = mainGroup;\n// This is the best way to export things in a way that's compatible with both ES\n// Modules and CommonJS, without build hacks, and so as not to break the\n// existing API.\n// https://github.com/rollup/rollup/issues/1961#issuecomment-423037881\nvar getAll = TWEEN.getAll.bind(TWEEN);\nvar removeAll = TWEEN.removeAll.bind(TWEEN);\nvar add = TWEEN.add.bind(TWEEN);\nvar remove = TWEEN.remove.bind(TWEEN);\nvar update = TWEEN.update.bind(TWEEN);\nvar exports = {\n  Easing: Easing,\n  Group: Group,\n  Interpolation: Interpolation,\n  now: now,\n  Sequence: Sequence,\n  nextId: nextId,\n  Tween: Tween,\n  VERSION: VERSION,\n  getAll: getAll,\n  removeAll: removeAll,\n  add: add,\n  remove: remove,\n  update: update\n};\nexport { Easing, Group, Interpolation, Sequence, Tween, VERSION, add, exports as default, getAll, nextId, now, remove, removeAll, update };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}