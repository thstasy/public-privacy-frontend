{"ast":null,"code":"import _classCallCheck from \"/Users/stasy/Desktop/Public+Privacy_0831/public-privacy-frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/stasy/Desktop/Public+Privacy_0831/public-privacy-frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { BufferGeometry, Float32BufferAttribute, OrthographicCamera, Mesh } from 'three';\nvar Pass = /*#__PURE__*/function () {\n  function Pass() {\n    _classCallCheck(this, Pass);\n    this.isPass = true;\n\n    // if set to true, the pass is processed by the composer\n    this.enabled = true;\n\n    // if set to true, the pass indicates to swap read and write buffer after rendering\n    this.needsSwap = true;\n\n    // if set to true, the pass clears its buffer before rendering\n    this.clear = false;\n\n    // if set to true, the result of the pass is rendered to screen. This is set automatically by EffectComposer.\n    this.renderToScreen = false;\n  }\n  _createClass(Pass, [{\n    key: \"setSize\",\n    value: function setSize( /* width, height */) {}\n  }, {\n    key: \"render\",\n    value: function render( /* renderer, writeBuffer, readBuffer, deltaTime, maskActive */\n    ) {\n      console.error('THREE.Pass: .render() must be implemented in derived pass.');\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {}\n  }]);\n  return Pass;\n}(); // Helper for passes that need to fill the viewport with a single quad.\nvar _camera = new OrthographicCamera(-1, 1, 1, -1, 0, 1);\n\n// https://github.com/mrdoob/three.js/pull/21358\n\nvar _geometry = new BufferGeometry();\n_geometry.setAttribute('position', new Float32BufferAttribute([-1, 3, 0, -1, -1, 0, 3, -1, 0], 3));\n_geometry.setAttribute('uv', new Float32BufferAttribute([0, 2, 0, 0, 2, 0], 2));\nvar FullScreenQuad = /*#__PURE__*/function () {\n  function FullScreenQuad(material) {\n    _classCallCheck(this, FullScreenQuad);\n    this._mesh = new Mesh(_geometry, material);\n  }\n  _createClass(FullScreenQuad, [{\n    key: \"dispose\",\n    value: function dispose() {\n      this._mesh.geometry.dispose();\n    }\n  }, {\n    key: \"render\",\n    value: function render(renderer) {\n      renderer.render(this._mesh, _camera);\n    }\n  }, {\n    key: \"material\",\n    get: function get() {\n      return this._mesh.material;\n    },\n    set: function set(value) {\n      this._mesh.material = value;\n    }\n  }]);\n  return FullScreenQuad;\n}();\nexport { Pass, FullScreenQuad };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}